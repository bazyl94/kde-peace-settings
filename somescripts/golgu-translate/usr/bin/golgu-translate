#!/bin/bash 
#license gpl 
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>

function_help(){
	
	echo "
	
WHAT IS IT ?

it's a script that translates and makes you hear  the pronunciation using the google translation service,   to work properly you must have an active connection and obviously a player that can be either VLC or mplayer

INSTALLATION 

you need of  :

vlc or mplayer , gawk html2text iconv  curl fold 

for debian systems :
	
	sudo apt-get install mawk coreutils html2text mplayer # or vlc 


LANGUAGES 

it supports these languages :
	
af sq ar az eu bn be bg ca zh-CN  zh-TW hr cs da nl en eo et tl fi fr gl ka de el gu Creole iw hi hu is id ga it ja kn ko la lv lt mk ms mt no fa pl pt ro ru sr sk sl es sw sv ta te th tr uk ur vi cy yi

USAGE:

golgu-translate  options  -t  text 

-d:  debug mode on 
-demo : will start a tutorial for this script , you can add even an language code to listen this tutorial in your language : 
-e : open golgu-traslate config file 
-h : print this help 
-i : input language ,example   example : -i en 
-l : print languages and exit 
-o: output language , example -o it 
-p : player  :  -p vlc or -p mplayer 
-s : translate and speak , you need of vlc or mplayer
-v : print version and exit 
-ws: write settings on config file located here $HOME/.config/golgu-translate/golgu-translate.cfg

start the demo :  golgu-translate -demo it 

you can try to translate without set languages , the input language will be set to AUTO and the output to ENGLISH 



The easiest example :      golgu-translate    text without \"\" 


The most complete example :  golgu-translate -p mplayer -ws  -s -d  -i en -o it   -t  hello World

You can also just type the output language and the text , input language will be set like AUTO 

golgu-translate   -o es  -t  hello world

PIPED USE 

golgu-translate can accept  the input from a pipe   in this way : 

 echo hello  | golgu-translate -o fr -t \$(cat)

fine @.@
"
}

function_language(){
echo "
LANGUAGE TABLE 
#######################################
#note not all  languages are supported#
#######################################

af          Afrikaans                                                                     
ak          Akan
sq          Albanian
am          Amharic
ar          Arabic
hy          Armenian
az          Azerbaijani
eu          Basque
be          Belarusian
bem         Bemba
bn          Bengali
bh          Bihari
xx-bork     Bork, bork, bork!
bs          Bosnian
br          Breton
bg          Bulgarian
km          Cambodian
ca          Catalan
chr         Cherokee
ny          Chichewa
zh-CN       Chinese (Simplified)
zh-TW       Chinese (Traditional)
co          Corsican
hr          Croatian
cs          Czech
da          Danish
nl          Dutch
xx-elmer    Elmer Fudd
en          English
eo          Esperanto
et          Estonian
ee          Ewe
fo          Faroese
tl          Filipino
fi          Finnish
fr          French
fy          Frisian
gaa         Ga
gl          Galician
ka          Georgian
de          German
el          Greek
gn          Guarani
gu          Gujarati
xx-hacker   Hacker
ht          Haitian Creole
ha          Hausa
haw         Hawaiian
iw          Hebrew
hi          Hindi
hu          Hungarian
is          Icelandic
ig          Igbo
id          Indonesian
ia          Interlingua
ga          Irish
it          Italian
ja          Japanese
jw          Javanese
kn          Kannada
kk          Kazakh
rw          Kinyarwanda
rn          Kirundi
xx-klingon  Klingon
kg          Kongo
ko          Korean
kri         Krio (Sierra Leone)
ku          Kurdish
ckb         Kurdish (Soran√Æ)
ky          Kyrgyz
lo          Laothian
la          Latin
lv          Latvian
ln          Lingala
lt          Lithuanian
loz         Lozi
lg          Luganda
ach         Luo
mk          Macedonian
mg          Malagasy
ms          Malay
ml          Malayalam
mt          Maltese
mi          Maori
mr          Marathi
mfe         Mauritian Creole
mo          Moldavian
mn          Mongolian
sr-ME       Montenegrin
ne          Nepali
pcm         Nigerian Pidgin
nso         Northern Sotho
no          Norwegian
nn          Norwegian (Nynorsk)
oc          Occitan
or          Oriya
om          Oromo
ps          Pashto
fa          Persian
xx-pirate   Pirate
pl          Polish
pt-BR       Portuguese (Brazil)
pt-PT       Portuguese (Portugal)
pa          Punjabi
qu          Quechua
ro          Romanian
rm          Romansh
nyn         Runyakitara
ru          Russian
gd          Scots Gaelic
sr          Serbian
sh          Serbo-Croatian
st          Sesotho
tn          Setswana
crs         Seychellois Creole
sn          Shona
sd          Sindhi
si          Sinhalese
sk          Slovak
sl          Slovenian
so          Somali
es          Spanish
es-419      Spanish (Latin American)
su          Sundanese
sw          Swahili
sv          Swedish
tg          Tajik
ta          Tamil
tt          Tatar
te          Telugu
th          Thai
ti          Tigrinya
to          Tonga
lua         Tshiluba
tum         Tumbuka
tr          Turkish
tk          Turkmen
tw          Twi
ug          Uighur
uk          Ukrainian
ur          Urdu
uz          Uzbek
vi          Vietnamese
cy          Welsh
wo          Wolof
xh          Xhosa
yi          Yiddish
yo          Yoruba
zu          Zulu
"
}

 function_demo (){
 
	  for (( c=0; c<=${#demotext[@]}; c++ )); do 
 
		 function_translate "$input_lang" "$output_lang" "${demotext[$c]}"
		      $player "http://translate.google.com/translate_tts?ie=UTF-8&tl=$output_lang&q=$translated_text"  >/dev/null  2>&1
	 done 
}

function_play_translated_text(){
	
	#$1 The output language  
	#$2 it's the text already translated'
	
	if [[ ! -z "$1" || ! -z "$2" ]]; then
		
		if [[ "$DEBUG" == on ]]; then 
echo "

function debug play_translated 

Player selected : $player 
link :  \"http://translate.google.com/translate_tts?ie=UTF-8&tl=$1&q=$2\"
"
		fi 
		
		i=0
		
while read line ; do 
	arr[$i]="$line"
	i=$(($i+1))

done< <(fold -w97 -s <<<"$2") #split text every 97 char
 
 

 for (( c=0; c<=${#arr[@]}; c++ )); do 
	 $player "http://translate.google.com/translate_tts?ie=UTF-8&tl=$1&q=${arr[$c]}" >/dev/null  2>&1
	 done   
		
		
		
		
		
		  
			
	 
			 
	else
		echo $"Error exiting this function should be work in this way :
		function_play_translated_text <outlanguage> <text-in-output-language>
		"
		exit 1
		
	fi 
	exit 0
}

function_translate(){
 

 
	result="$(curl -s -i --user-agent "" -d "sl=$1" -d "tl=$2" --data-urlencode "text=$3" http://translate.google.com)"
	encoding="$(awk '/Content-Type: .* charset=/ {sub(/^.*charset=["'\'']?/,""); sub(/[ "'\''].*$/,""); print}' <<<"$result")"
	translated_text="$(iconv -f $encoding <<<"$result" |  awk 'BEGIN {RS="</div>"};/<span[^>]* id=["'\'']?result_box["'\'']?/' | html2text -utf8)"
	echo $translated_text	
	
	if [[ "$DEBUG" == on ]]; then 
 	echo "
function translate debug: 
 
input language:		$1 
output language: 	$2 
text to translate:	"$3" 
translated text:	$translated_text  "
	fi 

}


function_check_program(){
	
program[0]=curl
program[1]=iconv
program[2]=html2text
program[3]=awk
program[4]=fold

knownplayer[0]=mplayer
knownplayer[1]=vlc
 
 


for program in "${program[@]}"; 
do if ! type -p "$program" >/dev/null;
 then echo "$program not found; PLEASE INSTALL IT" >&2
echo "error exiting..." >&2
echo 
 
echo "For debian : 

sudo apt-get install coreutils gawk  html2text curl libc-bin mplayer  # vlc "
 exit 1; 
fi; done

test=0
for program in "${knownplayer[@]}"; 
do if ! type -p "$program" >/dev/null; then 
test=$(($test+1))
 
fi 

done

if [[ "$test" = 2 ]]; then 
		echo "$program not found; PLEASE INSTALL IT" >&2
 		echo "For debian : sudo apt-get install ${knownplayer[@]}  "
	fi 
	
}

function_save_settings(){
	
 
directory="$HOME/.config/golgu-translate" 
if [[ !  -d "$directory"  ]] ; then
	mkdir "$directory"
else
# 	echo $directory exist 
# 	if [[ ! -e  "$directory/golgu-translate.cfg" ]]; then 
	echo "output_lang=\"$output_lang\"" > "$directory/golgu-translate.cfg"
	echo "input_lang=\"$input_lang\"" >> "$directory/golgu-translate.cfg"
# 	echo "SOUND=\"$SOUND\"" >> "$directory/golgu-translate.cfg"
	echo "player=\"$player\"" >> "$directory/golgu-translate.cfg"
# 	fi 
fi 
 
}

function_load_settings(){
	a="$HOME/.config/golgu-translate/golgu-translate.cfg" 
	if [[  -e "$a"  ]] ; then
	. "$a"  
	fi 

}

VERBOSE="off"
SAVESETTINGS="off"
SOUND="off"
DEFAULT_INPUT_LANG="auto"
DEFAULT_OUTPUT_LANG="en"
DEFAULT_PLAYER="cvlc --http-user-agent=Mozilla/5.0 --play-and-exit"
DEFAULT_PLAYER_ALTERNATE="mplayer -user-agent Mozilla"
VERSION="0.0.4"
DEVELOPER="nowardev@gmail.com"


#
 
demotext=(   "Hello this is the demo function. it will help you to use this script. let's Start!" "This is the easiest example with audio. " "We want to translate from spanish to english  the words hola mundo"  "first of all, open a terminal  and type" " golgu-translate .. space .. minus.. s .. hola mundo" " As you can see this script will translate even without using quotes, or setting languages" " The default ouput language is english of course" " instead for input language it's in auto mode" "but let's see another example" "we want translate from spanish to french the words hola mundo"  " so  type golgu .. minus .. translate' .. space" "  minus .. o .. space .. f r ..  minus .. t .. space  .. hola mundo" "So as you can understand from these examples"  "The Option.. minus .. s ..  it sets audio on  but you can translate even without audio support"  "the option minus .. O .. it sets the  output language" " The option .. minus i .. it sets the  input language"  "The Option.. minus .. w s .. writes your settings in config file " "The Option.. minus .. e ..  it opens an text editor to tweak   the config-file with a text editor" " remember the default output language it's english so" " if you are american or english, the option  o  is not required as well as the option i" " you can tweak the script to change the default output language" "the option minus .. l .. it prints the language codes" "the option minus .. p .. it sets the player that can be mplayer or vlc "  " the option  minus .. t ..  it's used to set the text to translate but  it's not required " "even if it's better for you to use it "   "the Option minus  D   can be used to see more informations about the translation  ..."   " remember to install mplayer or vlc to listen this text   ")


 
 

 	args=$@;  i=0
 	if [[ -z $@ ]]; then
		function_help
		echo 
		echo $"err : need some input :S"
		exit 
	fi
	
	function_check_program	
 
	function_load_settings
 
 	while (( $# )); do 
	case $1 in 
	-h|--help|-\?) function_help; exit 0;;
	-t ) shift 
	 while (( $# )); do 
 
	if [[ "$1" == "-i" || "$1" ==  "-o " || "$1" == "-d " || "$1" == "-v " || "$1" == "-s " || "$1" == "-e "  || "$1" == "-l "  || "$1"  == "-ss " ]]; then 
 
	break 
		else 
			
			text[$i]=$1
			i=$(($i+1))
			 
			 	  shift
		fi 
	 done
	 text="${text[@]}"
	 	 
	;;
#  	-d) input_lang=$DEFAULT_INPUT_LANG ; output_lang="$DEFAULT_OUTPUT_LANG";  shift  ;; 
	-e) 
	echo $"type your terminal editor , nano vim kate gedit etc..press enter for nano"
	read   
	
	if [[ -z "$REPLY" ]];then
		nano "$HOME/.config/golgu-translate/golgu-translate.cfg"
	else
		"$REPLY $HOME/.config/golgu-translate/golgu-translate.cfg "
	fi
 
	exit ;;
	-i ) input_lang="$2";  shift 2 ;; 
	-o )output_lang="$2"; shift 2 ;; 	
	-d) DEBUG="on"; shift;;
	-demo)  DEBUG="on";  input_lang=en ;  output_lang=$2 ; if [[ -z $output_lang ]]; then output_lang=en; fi  ;   function_demo $output_lang ; exit 0 ;;
	-v) echo version $VERSION  developer $DEVELOPER; exit  ; shift;;
	-ws) SAVESETTINGS="on"; shift ;;
	-p)if [[ "$2" == "vlc" || "$2" == "cvlc" && ! -z "$(type "$2" )"  ]] ; then player="$DEFAULT_PLAYER" ; elif [[ "$2" == "mplayer" && ! -z "$(type "$2")"   ]]; then player="$DEFAULT_PLAYER_ALTERNATE"  ; else echo $"Sorry no player found please install mplayer or vlc... exiting ";player="$DEFAULT_PLAYER" ; exit 2  ; fi ; shift 2 ;;  
	-l) function_language; exit; shift;;
	-s) SOUND="on"; shift;;
	*) args+=( "$1" ); shift ;;
		
	--) shift; echo "invalid option: $1" 1>&2; function_help; exit 1;;
	-*) echo "invalid option: $1" 1>&2; function_help; exit 1;;
	esac
	done
 
 if [[ -z "$input_lang" ]]; then 
	 input_lang=$DEFAULT_INPUT_LANG 
fi 	

if [[ -z "$output_lang" ]]; then 
	output_lang="$DEFAULT_OUTPUT_LANG"
fi 

if [[ -z "$player" ]]; then 
	player="$DEFAULT_PLAYER"
 fi 
 
if [[ -z "$text" ]] ; then 
 
	text="${args/-s /}"
	text="${text/-d /}"
	text="${text/-ws /}"
 
fi 

if [[ "$SAVESETTINGS" == "on" ]]; then 
	function_save_settings	
fi 
	
function_translate "$input_lang" "$output_lang" "$text"
 
if [[ "$SOUND" == on ]]; then 
function_play_translated_text "$output_lang" "$translated_text"
fi 
	
	