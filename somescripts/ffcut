#!/bin/bash -x
Version="0.2.3"
#Copyright (C) 2012 nowardev nowardev@gmail.com
 
#This file is part of kde-peace-settings.
 
#kde-peace-settings is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

title=$"FFmpeg Dolphin Service Menu"
listoffile="$HOME/ffmpeg-service-menu-qt.lst"
# easyprofile_file="$HOME/.FFmpeg_easy_profile"
ffmpeg_profile_file_audio="$HOME/.FFmpeg_profiles-qt_audio.lst"
ffmpeg_profile_file_device="$HOME/.FFmpeg_profiles-qt_device.lst"
ffmpeg_profile_file_video="$HOME/.FFmpeg_profiles-qt_video.lst"
templog="/tmp/ffmpeg_peace_dolphin_service_menu.log"
ffmpeg_service_menu_settings="$HOME/.FFmpeg_service_menu_settings"
ffcut_temp_file="$HOME/.FFcut_service_menu_timefile"
resetlistafterconversion="yes"
passivepopup="enabled"
pidofx="$(pidof X)"
probe=$(type -p ffprobe)

threads=$(awk '/processor/{print}' /proc/cpuinfo | wc -l)
function_ffplay(){
	totalseconds="$(ffplay  "$1"  2>&1 |awk 'BEGIN { RS = "\r" }; { if ($1 != "") x = $1 }; END { print x }' )"


}

function_delete_file (){
	rm "$1"
	
}


function_calculate () {
	totalseconds="1002.2"
	totalseconds="$(printf '%05.3f\n' "$totalseconds")"
	
	realseconds="$(awk -F'.' '{print $1}' << _EOF
$totalseconds
_EOF
)"

	thousandths=$(awk -F'.' '{print $2}' << _EOF 
$totalseconds
_EOF
)
	thousandths="$(printf '%03.0f\n' "$thousandths")"
# 	duration=$(($store-$totalseconds))
# 	if [[ "$duration" > 0 ]]; then
# 		
# 	fi 
	if [[  $(echo "scale=3; $realseconds - 59"|bc) != -*  ]]; then
	minutes=$(echo "scale=0 ; $realseconds / 60" | bc)
	else 
		minutes="0"
		hours="0"
	fi 
	
	if [[  $(echo "scale=3; $minutes - 59"| bc ) != -*   ]]; then 
		hours=$(echo "scale=0 ;  $minutes / 60" | bc)  
	else
		hours="0"
	fi 
	
	
	a=$(echo "scale=3 ;  $hours * 60" | bc )
	minutes=$(echo "scale=3 ;  $minutes-$a" | bc )
	
	a=$(echo "scale=3 ; $hours * 3600"| bc )
	b=$(echo "scale=3 ; $minutes  * 60"| bc )
	c=$(echo "scale=3 ; $a + $b"| bc )
	
	seconds=$(echo "$realseconds-$c"| bc )
	
	if [[ $hours > 0 ]]; then
		hours="$(printf '%02.0f\n' "$hours")"
	else
		hours="00"
	fi
	
	if [[ $minutes > 0 ]]; then
		minutes="$(printf '%02.0f\n' "$minutes")"
	else
		minutes="00"
	fi
									
	if [[ $seconds > 0 ]]; then
		seconds="$(printf '%02.0f\n' "$seconds")"
		seconds="$seconds.$thousandths"
	else
		seconds="00"
	fi
	
	echo "results  $hours/$minutes/$seconds/"
	
}
function_startcut() {
		function_passive_popup_test $"Stop FFplay where you need to start cut"
		function_ffplay "$1"
		function_calculate
		
		
		 
}

function_stopcut() {
		function_passive_popup_test $"Stop FFplay where you need to stop cutting"
		function_ffplay "$1"
		totalseconds=$(echo "$storeseconds-$totalseconds"| bc )
		function_calculate
		
}

function_ask_ffcut_param () {
paramffcut="-acodec copy -vcodec copy"	
	if [[ -z "$pidofx" ]]; then 
		echo 
		echo $"This \"$paramffcut\" is the string i will use to cut with ffmpeg or avconv so... do you want keep it ? PRESS ENTER to keep this string or type what you need "
		read
			if [[ -z "$REPLY" ]]; then 
				echo "i will use ffmpeg -i "$line"  $paramffcut "
			else
				paramffcut="$REPLY"
			fi 
	else 
		ansffcutparam=$(kdialog --title "$title" --textinputbox $"Please Edit now the string if you want use another one this is the fastest you can get : $paramffcut" --  "$paramffcut" )
			if [[ ! -z "$ansffcutparam" ]]; then
				paramffcut="$ansffcutparam"
			fi 	
	fi 
}


		
function_ffcut_mode1 () {

	servicenumber=1
	paramffcut="-acodec copy -vcodec copy"
	function_ask_ffcut_param
	while  read <&3  line ; do
				extension="${line##*.}"
		if [[ -z "$extension" ]] ; then
			function_message_error $"unable to get the extension of your files error\bug?"
					
		fi
		k="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $1}' "$ffcut_temp_file")"
		hh="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $2}' "$ffcut_temp_file")"
		mm="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $3}' "$ffcut_temp_file")"
		ss="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $4}' "$ffcut_temp_file")"
		 
			if [[ "$k" != "$line" ]]; then
			function_passive_popup_test $"mmm there is mess on "$ffcut_temp_file""
			exit 2
			else 
				echo "ffmpeg  -ss $hh:$mm:$ss -i "$line" -acodec copy -vcodec copy "${line%%.*}_$hh:$mm:$ss.$extension""
				ffmpeg  -i "$line"  -ss $hh:$mm:$ss -acodec copy -vcodec copy "${line%%.*}_$hh:$mm:$ss.$extension"
				
			fi 
		servicenumber=$(($servicenumber+1))
			
			done 3< "$listoffile"
			
				}
	
function_ffcut_mode2 () {
	
	servicenumber=1
	paramffcut="-acodec copy -vcodec copy"
	function_ask_ffcut_param
	while  read <&3 ; do
				extension="${line##*.}"
		if [[ -z "$extension" ]] ; then
			function_message_error $"unable to get the extension of your files error\bug?"
					
		fi
		k="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $1}' "$ffcut_temp_file")"
		hh="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $2}' "$ffcut_temp_file")"
		mm="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $3}' "$ffcut_temp_file")"
		ss="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $4}' "$ffcut_temp_file")"
		 
			if [[ "$k" != "$line" ]]; then
			function_passive_popup_test $"mmm there is mess on "$ffcut_temp_file""
			exit 2
			else 
				echo "ffmpeg  -t $hh:$mm:$ss -i "$line" -acodec copy -vcodec copy "${line%%.*}_$hh:$mm:$ss.$extension""
				ffmpeg -i "$line" -t $hh:$mm:$ss  -acodec copy -vcodec copy "${line%%.*}_$hh:$mm:$ss.$extension"
				
			fi 
		servicenumber=$(($servicenumber+1))
			
			done 3< "$listoffile"
			
			
}
		 
		
		
		
function_ffcut_mode3 () {
	servicenumber=1
	paramffcut="-acodec copy -vcodec copy"
	function_ask_ffcut_param
	while  read <&3 ; do
				extension="${line##*.}"
		if [[ -z "$extension" ]] ; then
			function_message_error $"unable to get the extension of your files error\bug?"
					
		fi
		k="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $1}' "$ffcut_temp_file")"
		hh="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $3}' "$ffcut_temp_file")"
		mm="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $4}' "$ffcut_temp_file")"
		ss="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $5}' "$ffcut_temp_file")"
		hh1="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $7}' "$ffcut_temp_file")"
		mm1="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $8}' "$ffcut_temp_file")"
		ss1="$(awk -v a=$servicenumber -F'/' 'FNR == $a {print $9}' "$ffcut_temp_file")"
		 
			if [[ "$k" != "$line" ]]; then
			function_passive_popup_test $"mmm there is mess on "$ffcut_temp_file""
			exit 2
			else 
				echo "ffmpeg  -ss $hh:$mm:$ss -i "$line" -acodec copy -vcodec copy "${line%%.*}_$hh:$mm:$ss.$extension""
				ffmpeg -i "$line"  -ss $hh:$mm:$ss -t $hh1:$mm1:$ss1  $paramffcut "${line%%.*}_$hh:$mm:$ss.$extension"
				
			fi 
		servicenumber=$(($servicenumber+1))
			
			done 3< "$listoffile"
			
			
}


function_menu_cut () {
	anscutmenu=$(kdialog  --title $"FFcut Menu" --menu  $"Choose a mode"  mode1 $"Cut From START==>to A" mode3 $"Cut From A==> To B"  mode2 $"Cut From B==>To END"  help $"Help" back $"Back"  --default $"START==>A")
	echo $anscutmenu
}


function_menu_cut_antix () {
	clear
	tput cup 3 14
	tput setaf 2
	
	
# 	echo "http://code.google.com/p/kde-peace-settings/source/browse/ffmpeg-peace-service-menu/usr/bin/ffmpeg-peace-service-menu?name=master"
	
	tput cup 5 17 
	tput rev 
	echo $"FFcut Menu : FFmpeg Dolphin Service Menu"
	tput sgr0
	
	
	
	menutextffcut=($"Cut From START==>to A" $"Cut From A==> To B" $"Cut From B==>To END" $"Help" $"Back" )
	menulabelffcut=(mode1 mode3  mode2 help Back) 
	
	
	
 
	
	a=0
	b=7
	echo 
	for menut in "${menutextffcut[@]}" ; do 
		c=$(($b+$a))
		
		tput cup $c 16
		echo "$(($a+1)). ${menutextffcut[$a]}"
		a=$(($a+1))
		
		done
		
		
		
		
		tput bold
		tput cup $(($c+2)) 16
		read -p $"Enter Your Choice (1-"$a")" choice
		
 
		tput sgr0 
}





function_menu_cut_start () {
	if [[ -z "$pidofx" ]]; then 
		function_menu_cut_antix
	else
		function_menu_cut
	fi
	
}

function_anscutmenu() {
	
			set -x
			case $anscutmenu in
			
			mode1)
			
			while read line ; do 
				function_startcut "$line"
				echo "$1/startcut/$hours/$minutes/$seconds/" >>"$ffcut_temp_file"
			done< "$listoffile"
			;;
			mode2)
			while read line ; do
			function_stopcut "$1"
			echo "$1/stopcut/$hours/$minutes/$seconds/" >>"$ffcut_temp_file"
			done< "$listoffile"
			;;
			mode3)
			while read line ; do
			function_startcut "$1"
			storeseconds="$totalseconds"
			echo -n "$1/startcut/$hours/$minutes/$seconds/" >>"$ffcut_temp_file"
			
			function_stopcut "$1"
			echo "stopcut/$hours/$minutes/$seconds/" >>"$ffcut_temp_file"
			done< "$listoffile"
			;;
			*)
			function_message_error $"Menu FFcut has not received a proper answer and you suck"
			function_menu_cut
			;;
			
			esac

}

function_message_error () {
	message=$1
}

# function_menu_cut
# function_ask_ffcut_param
# function_anscutmenu
function_calculate
