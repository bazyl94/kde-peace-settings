#!/bin/bash 
#license gpl 
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>
#nowardev 2013 nowardev@gmail.com
#

#keys

enus=("open browser" "open text editor" "show webcam" "shut down computer" "hibernate computer" "suspend computer" "what time is it" "search image" "search" "youtube" "minitube" "show menu" "type" "translate" "open file manager" "open link" "open folder documents" "open folder download" "open folder music" "open folder pictures" "open folder public" "open folder videos" "play music folder" "player stop" "player continue " "player next track"  "player previous track")

it=("apri browser" "apri editor di testo" "mostra webcam" "mostra web cam" "chiudi computer" "iberna computer" "sospendi computer" "che ora" "cerca immagin" "cerca" "youtube" "minitube" "mostra menu" "digita" "traduci" "apri file manager" "apri file manager" "apri link" "apri cartella documenti" "apri cartella download" "apri cartella musica" "apri cartella foto" "apri cartella pubblica" "apri cartella video" "riproduci cartella musica" "lettore stop" "lettore continua" "lettore traccia precedente" "lettore prossima traccia" )

function_show_keys(){
echo "english keys

${enus[@]}

italian keys 

${it[@]}
"
}

function_help(){

echo  $"  

	
WHAT IS IT ?

it's a script that records your voice with ffmpeg or avconv and it sends to google server to be converted into text.It can even performe some operation like open a browser show your webcam search for stuff on internet for now this function can be used only in english and italian :) 

WHY ?

for my own fun 
because programming for me it's an hobby and a relax time 
i hate  repetitive works like this shit: open folder and select all put them in vlc and click play :D this is shit wtf!, ah playlist ... well i put my music in the folder music and so... i want all my playlist it's all the folder :D


TROUBLES WITH MIC : 

if you have some problems with the default mic or if you want use the webcam's mic you can set it in this way

-m hw:x,x , the  default one is hw:0,0

where x,x must a set of numbers , you can understand them reading your configuration

#########################################################
$(cat /proc/asound/pcm| grep -i capture )
#########################################################

if you get some problems recording audio just see this file $logfile, you could get some problem with ffmpeg \ avcon because some mic require 2 channels some other require 1 channel mono...

INSTALLATION 

Put the script in your $HOME/bin or /usr/local/bin or /usr/bin and give it chmod +x 

you need of  :

ffmpeg or avconv awk #minitube chromium  

for debian systems :
	
	sudo apt-get install awk ffmpeg #avconv minitube mplayer or vlc

	


LANGUAGES 

it supports these languages some code could be wrong ... :
	
af sq ar az eu bn be bg ca zh-CN  zh-TW hr cs da nl en eo et tl fi fr gl ka de el gu Creole iw hi hu is id ga it ja kn ko la lv lt mk ms mt no fa pl pt ro ru sr sk sl es sw sv ta te th tr uk ur vi cy yi

USAGE:

golgu-speechtotext  <options>  

-a : function run applications and commands activated , for keys look down  ...
-c : set channels , some mic require 2 channels some others require 1 channel to work properly with ffmpeg
-ds : delete settings file $HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg
-e : open golgu-speechtotext config file 
-h : print this help 
-k : show keys 
-i : set input language 
-l : print languages and exit 
-s : play text 
-t : example -t 3  will record only 3 seconds then will process your voice
-v : print version and exit 
-w : set webcam device to use , example : -w /dev/video0
-ws: write settings on config file located here $HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg

########
EXAMPLES
########
 
 
set input language to english Usa, the default one if not specified ..

---------------------------
golgu-speechtotext -i en-us 
---------------------------

set channel to mono usefull for some mic (logitech)
--------------------------------
golgu-speechtotext -i en-us -c 1
--------------------------------

#######################################
FUNCTIONS RUN APPLICATIONS AND COMMANDS 
#######################################

this function if activated can run applications and do some stuff ... like open the browser or show your webcam , if you have more than one it will ask you to pick one .. 

-------------------------------
golgu-speechtotext -i en-us -a
-------------------------------

english  keys :

open browser 
open link
open file manager
search 
show webcam 
open text editor
what time is it 
suspend computer
minitube key
type
open folder documents
open folder download
open folder pictures
open folder music
open folder videos
open folder public


italian keys 

apri browser
apri cartella documenti
apri cartella download
apri cartella foto
apri cartella musica
apri cartella video
apri cartella pubblica
apri link
apri file manager
cerca 
digita
mostra webcam 
apri editor di testo 
che ora è
sospendi computer 
minitube chiave


"
}


function_print_languages(){
echo $"This is a language table : IT COULD BE NOT SO GOOD ... "

echo "
LANGUAGE TABLE 
#######################################
#note not all  languages are supported#
#######################################

af          Afrikaans                                                                     
ak          Akan
sq          Albanian
am          Amharic
ar          Arabic
hy          Armenian
az          Azerbaijani
eu          Basque
be          Belarusian
bem         Bemba
bn          Bengali
bh          Bihari
xx-bork     Bork, bork, bork!
bs          Bosnian
br          Breton
bg          Bulgarian
km          Cambodian
ca          Catalan
chr         Cherokee
ny          Chichewa
zh-CN       Chinese (Simplified)
zh-TW       Chinese (Traditional)
co          Corsican
hr          Croatian
cs          Czech
da          Danish
nl          Dutch
xx-elmer    Elmer Fudd
en          English
eo          Esperanto
et          Estonian
ee          Ewe
fo          Faroese
tl          Filipino
fi          Finnish
fr          French
fy          Frisian
gaa         Ga
gl          Galician
ka          Georgian
de          German
el          Greek
gn          Guarani
gu          Gujarati
xx-hacker   Hacker
ht          Haitian Creole
ha          Hausa
haw         Hawaiian
iw          Hebrew
hi          Hindi
hu          Hungarian
is          Icelandic
ig          Igbo
id          Indonesian
ia          Interlingua
ga          Irish
it          Italian
ja          Japanese
jw          Javanese
kn          Kannada
kk          Kazakh
rw          Kinyarwanda
rn          Kirundi
xx-klingon  Klingon
kg          Kongo
ko          Korean
kri         Krio (Sierra Leone)
ku          Kurdish
ckb         Kurdish (Soranî)
ky          Kyrgyz
lo          Laothian
la          Latin
lv          Latvian
ln          Lingala
lt          Lithuanian
loz         Lozi
lg          Luganda
ach         Luo
mk          Macedonian
mg          Malagasy
ms          Malay
ml          Malayalam
mt          Maltese
mi          Maori
mr          Marathi
mfe         Mauritian Creole
mo          Moldavian
mn          Mongolian
sr-ME       Montenegrin
ne          Nepali
pcm         Nigerian Pidgin
nso         Northern Sotho
no          Norwegian
nn          Norwegian (Nynorsk)
oc          Occitan
or          Oriya
om          Oromo
ps          Pashto
fa          Persian
xx-pirate   Pirate
pl          Polish
pt-BR       Portuguese (Brazil)
pt-PT       Portuguese (Portugal)
pa          Punjabi
qu          Quechua
ro          Romanian
rm          Romansh
nyn         Runyakitara
ru          Russian
gd          Scots Gaelic
sr          Serbian
sh          Serbo-Croatian
st          Sesotho
tn          Setswana
crs         Seychellois Creole
sn          Shona
sd          Sindhi
si          Sinhalese
sk          Slovak
sl          Slovenian
so          Somali
es          Spanish
es-419      Spanish (Latin American)
su          Sundanese
sw          Swahili
sv          Swedish
tg          Tajik
ta          Tamil
tt          Tatar
te          Telugu
th          Thai
ti          Tigrinya
to          Tonga
lua         Tshiluba
tum         Tumbuka
tr          Turkish
tk          Turkmen
tw          Twi
ug          Uighur
uk          Ukrainian
ur          Urdu
uz          Uzbek
vi          Vietnamese
cy          Welsh
wo          Wolof
xh          Xhosa
yi          Yiddish
yo          Yoruba
zu          Zulu
"

}



function_check_program(){
	

program[1]=awk
 

requiresome[0]=ffmpeg
requiresome[1]=avconv
 
# accessories[0]="klipper"
# accessories[1]="xclip"

for program in "${program[@]}"; 
do if ! type -p "$program" >/dev/null;
 then echo "$program not found; PLEASE INSTALL IT" >&2
echo "error exiting..." >&2
echo 
 
echo "For debian : 

sudo apt-get install   gawk  ffmpeg  # vlc "
 exit 1; 
fi; done

test=0
for program in "${requiresome[@]}"; 
do if ! type -p "$program" >/dev/null; then 
test=$(($test+1))
 
fi 

done

if [[ "$test" = 2 ]]; then 
		echo "$program not found; PLEASE INSTALL IT" >&2
 		echo "For debian : sudo apt-get install ${requiresome[@]}  "
fi 


test=0
 
knownplayer[0]=mplayer
knownplayer[1]=vlc

for program in "${knownplayer[@]}"; 
do if ! type -p "$program" >/dev/null; then 
test=$(($test+1)) ; else player="$program"; break
 
fi 

done

if [[ "$test" = 2 ]]; then 
		echo "$program not found; PLEASE INSTALL IT" >&2
 		echo "For debian : sudo apt-get install ${knownplayer[@]}  "
fi 

if [[ "$player" == "mplayer" ]] ; then 
player="mplayer -user-agent Mozilla"
elif [[ "$player" == "vlc" ]] ; then 
player="cvlc --http-user-agent=Mozilla/5.0 --play-and-exit"
else
echo $"Error no player please install or vlc or mplayer or modify this script ;)"
exit
fi 
	
}

function_detect_mic(){

if  [[ $DEBUG == "on" ]] ; then 
echo $"Loading detect mic function"
fi 
i=0
while read line ;do
audiocard[$i]="$line"
i=$(($i+1))
done< <(awk -F '[:-]' '/capture/{printf "hw:%d,%d\n", $1,$2}' /proc/asound/pcm)

i=0
while read line ;do
audionamecard[$i]="$line"
i=$(($i+1))
done< <(awk -F':' '/capture/{sub(/ /,"") ;print $3}' /proc/asound/pcm)

 
if [[ ${#audiocard[@]} >1 ]]; then 
echo $"I have detected more than 1 microphone in your computer please select what you want use (0-$((${#audiocard[@]}-1)))
"

 
 
i=0
for (( i=0 ; i <${#audiocard[@]};i++)); do 
    echo $"Choose $i for this audio card:  ${audionamecard[$i]} "

done

 
read   
 
    if [[ -z "$REPLY" ]];then
        microphone="${audiocard[0]}"
    else
    echo $"MicroPhone selected "${audionamecard["$REPLY"]}"  "${audiocard["$REPLY"]}""
       microphone="${audiocard["$REPLY"]}"
    fi
    
REPLY=""
else
 microphone="${audiocard[0]}"
 fi 
 if  [[ $DEBUG == "on" ]] ; then 
echo $"Microphone detected $microphone"
fi 
}



function_detect_ffmpegavplay(){
if [[ -z "$(type -p ffmpeg)" ]] ; then 
	if [[ -z "$(type -p avconv)" ]] ; then  kdialog --passivepopup $"FFmpeg or AVconv is not present in your system please install it "; else binary="$(type -p avconv)"; binarywebcam="$(type -p avplay)" ; fi  
		else 
			binary="$(type -p ffmpeg)"
			binarywebcam="$(type -p ffplay)"
		fi 
}

function_detect_webcam(){
i=0
	while read line ;do
		webcamdetected[$i]="$line"
		i=$(($i+1))
	done< <(ls /dev | grep video)
	if [[ -z ${webcamdetected[@]}  ]] ; then 
		echo "no webcam detected ... plugin ? driver? bug?"
		webcamdevice="none"
	elif [[ ${#webcamdetected[@]} >1 ]] ; then 
		echo $"I have detected more than 1 webcam please select on (0-$((${#webcamdetected[@]}-1))) 
"
		i=0
		for (( i=0 ; i <${#webcamdetected[@]};i++)); do 
			echo $"Choose $i for this webcam:  ${webcamdetected[$i]} "

		done
		read 
		

		if [[ -z "$REPLY" ]];then
			tput setaf 1
			echo $"No answer sorry exiting.."
			tput setaf 8
			exit
		else
			webcamdevice="/dev/"${webcamdetected[$REPLY]}""
		
		fi
		REPLY=""
		echo
	else
		webcamdevice="/dev/"${webcamdetected[0]}""
	fi
	if  [[ $DEBUG == "on" ]] ; then 
		echo $"Detected webcam $webcamdevice"
	fi 
}



function_play_translated_text(){
	
	#$1 The output language  
	#$2 it's the text already translated'
	
	if [[ ! -z "$1" || ! -z "$2" ]]; then
		
		if [[ "$DEBUG" == on ]]; then 
echo "

function debug play_translated 

Player selected : $player 
link :  \"http://translate.google.com/translate_tts?ie=UTF-8&tl=$1&q=$2\"
"
		fi 
		
		i=0
		
while read line ; do 
	arr[$i]="$line"
	i=$(($i+1))

done< <(fold -w97 -s <<<"$2") #split text every 97 char
 
 

 for (( c=0; c<=${#arr[@]}; c++ )); do 
	 $player "http://translate.google.com/translate_tts?ie=UTF-8&tl=$1&q=${arr[$c]}" >/dev/null  2>&1
	 done   
		
		
		
		
		
		  
			
	 
			 
	else
		echo $"Error exiting this function should be work in this way :
		function_play_translated_text <outlanguage> <text-in-output-language>
		"
		exit 1
		
	fi 
# 	exit 0
}


function_save_settings(){

directory="$HOME/.config/golgu-speechtotext" 
if [[ !  -d "$directory"  ]] ; then
	mkdir "$directory"
else
 
	echo "input_lang=\"$input_lang\"" > "$directory/golgu-speechtotext.cfg"
 
	echo "microphone=\"$microphone\"" >> "$directory/golgu-speechtotext.cfg"
	echo "webcamdevice=\"$webcamdevice\"" >> "$directory/golgu-speechtotext.cfg"
	echo "channel=\"$channel\"" >> "$directory/golgu-speechtotext.cfg"
	
# 	echo "CLIPBOARD=\"$CLIPBOARD\"" >> "$directory/golgu-speechtotext.cfg"
# 	fi 
fi 
 }
function_ask_settings(){
if [[ "$DEBUG" == "on" ]]; then
set -x
fi 
function_detect_mic
 
echo $"Choose your language: en-us it fr de a pseudo corret list can be read typing golgu-speechtotext -l PRESS ENTER for en-us"
read   

    if [[ -z "$REPLY" ]];then
        input_lang="en-us"
    else
        input_lang="$REPLY"
    fi
REPLY=""
	
echo

echo $"Choose how many channels has your mic ? PRESS ENTER FOR 1 or any key for 2 "
read   

    if [[ -z "$REPLY" ]];then
    
        channel="1"
    else
	testvariable="$REPLY"
		if [[ -z "$testvariable" ]]; then
			echo $"EMPTY CHANNEL SETTING IT TO 1"
    
		elif  [[ "$testvariable" != *[!0-9]*  ]] ;then
			echo $"MUST BE A NUMBER 1 OR 2  CHANNEL SETTING IT TO 1"
			channel="$testvariable"
		else
			echo  $"MUST BE A NUMBER 1 OR 2  CHANNEL SETTING IT TO 1 ...you have written "\" $testvariable \"" "
		exit 2
    
		fi 
		
    fi
    
 
REPLY=""
echo
	

	function_detect_webcam
	function_save_settings
	function_load_settings
if [[ "$DEBUG" == "on" ]]; then
set +x
fi 
}

function_load_settings(){
if [[ "$DEBUG" == "on" ]]; then
set -x
fi 
	a="$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg" 
	if [[  -e "$a"  ]] ; then
	. "$a"  
		if [[ -z $microphone ]] ; then 
		function_ask_settings
		fi 
	else 

	function_ask_settings
	fi 
if [[ "$DEBUG" == "on" ]]; then
set +x
fi 
}


function_record_sox(){

rec   -c $channel -t alsa  $microphone -r 16000 "$1"  silence 1 0.1 3% $seconds 3.0 3%  2>>"$logfile" 
}
function_record(){

#$1 recording file

if [[ "$DEBUG" == "on" ]]; then
set -x
fi 

#if [[ ! -z ]] ; then  sleep "$timer" ; killall -INT $pid ; fi 


rm "$logfile"

if [[ $TIMER == "off" ]] ; then 
	echo $"Recording from $microphone Please press CTRL C to stop recording .... "
	if [[ "$DEBUG" == "on" ]] ; then 
		echo "$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1""
	fi 


	echo "$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1"
" > "$logfile" 
$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile"  

	if [[ ! -z "$( awk '/cannot set channel count to 1/{print}' "$logfile")"  ]]; then 
		echo "$binary  -f  alsa  -ac 2 -i $microphone -ar 16000 -acodec flac -vn -y "$1"  
" > "$logfile" 
		$binary  -f  alsa  -ac 2 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile"  
	elif [[ ! -z "$( awk '/cannot set channel count to 2/{print}' "$logfile")"  ]]; then 
		echo "$binary  -f  alsa  -ac 1 -i $microphone -ar 16000 -acodec flac -vn -y "$1"
">"$logfile"
		$binary  -f  alsa  -ac 1 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile" 
	elif [[ ! -z  "$( awk '/Device or resource busy/{print}' "$logfile")" ]] ; then 
		tput setaf 1
		echo $"
ERROR EXITING : 

Device or resource busy

some application is using your mic please kill it ,lsof | grep pcm should tell you which application is using your mic so you can kill it using the PID , or  you could restart alsa with this command :

sudo alsa force-reload

"
	tput setaf 8
	exit
	elif  [[ ! -z  "$( awk '/cannot open audio device/{print}' "$logfile")" ]] ; then 
		tput setaf 1
		echo $"
ERROR EXITING 
cannot open audio device SETTINGS ARE CORRECT? it seems system doens't recognize your card this could be due to a temp problem , expecially with usb cards or maybe the driver doesn't work properly

try to reload alsa driver with this 

sudo alsa force-reload

try to remove your usb audio card \ webcam microphone and plug in it again 

load an older kernel 

:) if doens't work your settings could be wrong run this 

cat $logfile

settings i have used to record ... 

$binary  -f  alsa  -ac 1 -$channel $microphone -ar 16000 -acodec flac -vn -y "$1"  

"
	tput setaf 8
		exit 
	fi


	
	
	
else 
	echo $"Recording from $microphone timer on $time .... "

	if [[ "$DEBUG" == "on" ]] ; then 
		echo "$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1""
	fi 


	echo "$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1"
" > "$logfile" 
$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile"  &  pid="$!" 

	if [[ ! -z "$( awk '/cannot set channel count to 1/{print}' "$logfile")"  ]]; then 
		echo "$binary  -f  alsa  -ac 2 -i $microphone -ar 16000 -acodec flac -vn -y "$1"  
" > "$logfile" 
		$binary  -f  alsa  -ac 2 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile"  &  pid="$!" 
	elif [[ ! -z "$( awk '/cannot set channel count to 2/{print}' "$logfile")"  ]]; then 
		echo "$binary  -f  alsa  -ac 1 -i $microphone -ar 16000 -acodec flac -vn -y "$1"
">"$logfile"
		$binary  -f  alsa  -ac 1 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>>"$logfile" &  pid="$!" 
	elif [[ ! -z  "$( awk '/Device or resource busy/{print}' "$logfile")" ]] ; then 
		tput setaf 1
		echo $"
ERROR EXITING : 

Device or resource busy

some application is using your mic please kill it ,lsof | grep pcm should tell you which application is using your mic so you can kill it using the PID , or  you could restart alsa with this command :

sudo alsa force-reload

"
	tput setaf 8
	exit
	elif  [[ ! -z  "$( awk '/cannot open audio device/{print}' "$logfile")" ]] ; then 
		tput setaf 1
		echo $"
ERROR EXITING 
cannot open audio device SETTINGS ARE CORRECT? it seems system doens't recognize your card this could be due to a temp problem , expecially with usb cards or maybe the driver doesn't work properly

try to reload alsa driver with this 

sudo alsa force-reload

try to remove your usb audio card \ webcam microphone and plug in it again 

load an older kernel 

:) if doens't work your settings could be wrong run this 

cat $logfile

settings i have used to record ... 

$binary  -f  alsa  -ac 1 -$channel $microphone -ar 16000 -acodec flac -vn -y "$1"  

"
	tput setaf 8
		exit 
	fi
fi 


if [[ "$DEBUG" == "on" ]]; then
set +x
fi 

if [[ "$TIMER" == "on" ]] ; then 
 
testvariable="$time"


	if [[ -z "$testvariable" ]]; then
		echo $"you need to specify a time to stop recording with option -t exiting ... err no time set" 2>>"$logfile"
		exit 1

	elif  [[ "$testvariable" != *[!0-9]*  ]] ;then
    
		sleep "$time" && killall -INT "$binary" 2>>"$logfile"
    
	else
		echo  $"your variable is not a number ...you have written "\" $testvariable \"" " 2>>"$logfile"
		exit 2
    
	fi 
fi 

}
 
 
 
function_speechtotext(){
#$1 file flac to sent to google 
#$2 language
if [[ "$DEBUG" == "on" ]]; then
set -x
fi 

wget -q -U "Mozilla/5.0" --post-file "$1" --header "Content-Type: audio/x-flac; rate=16000" -O - "http://www.google.com/speech-api/v1/recognize?lang="$2"&client=chromium" | cut -d\" -f12  >"$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst"
if [[ "$DEBUG" == "on" ]]; then
set +x
fi 
}


function_display_text(){
if [[ ! -s "$1" ]]; then 
tput setaf 1
echo $"


cat "$logfile"

$(cat "$logfile")


Sorry no voice detected ... check mic settings ... maybe mic is not plugged or maybe  channel must be set to 1 or 2 with option -c 1 or -c 2 or your ffmpeg\avcon has some problems check the log 
"
tput setaf 8
exit 
else 
echo "
Text Detected: 
"
cat "$1"
echo 
fi 
 
}

function_open_programs(){
if [[ "$DEBUG" == "on" ]]; then
set -x
fi 
 


case "$language_open_browser" in 
"en-us"|"en"| "en-gb")
golgu_speak_languagecode="en"
variable=("${enus[@]}")
;;
"it")
golgu_speak_languagecode="it"
variable=("${it[@]}")
;;

esac



# awk -v test="$browser" '$0 ~ test {print}'


 
for r in "${variable[@]}" ; do

	if [[ ! -z "$(grep -i "$r"   "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst")" ]]; then
		if [[ "$DEBUG" == "on" ]]; then
 		set -x
		fi 
		case $r in 
		"type" | "digita")
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		xdotool type "$question" 
		;;
		"show menu" | "mostra menu") if [[ ! -z "$(type plasma-desktop )" ]] ; then  qdbus org.kde.krunner /App org.kde.krunner.App.display;  else echo $"Sorry this function is only for kde only for now ..." ; fi 
		;;
		#if [[ ! -z "$(grep -i "type" | "digita"   "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst")" ]]; then xdotool type "$(awk 'n=index($0,"digita"){print substr($0,n+1)}' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )" ; fi ;
		"suspend computer"|"sospendi computer")
		dbus-send --print-reply --dest='org.freedesktop.PowerManagement' /org/freedesktop/PowerManagement org.freedesktop.PowerManagement.Suspend
		;;
# 		"shut down"|"chiudi computer")
# 		dbus-send --print-reply --system --dest='org.freedesktop.PowerManagement' /org/freedesktop/PowerManagement org.freedesktop.PowerManagement.Shutdown /usr/lib/x86_64-linux-gnu/qt4/bin/qdbus --system org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
# 		;;
		"what time is it" |"che ora" )
		
		date="$(date +"%I:%M" )"
		echo "$date" 
		function_play_translated_text "$golgu_speak_languagecode"  "$date" 
		
		exit
		;;
		"open browser" |"apri browser" )
		xdg-open 'https://duckduckgo.com/' & exit
		;;
		"open link" |"apri link" )
		question="$(awk '{ for (i=3; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		http="$(awk '/http:\/\//{print}' <<_EOF
"$question"
_EOF
)"
		if [[ -z $http  ]] ; then question="http://""$question"; fi 
 
		xdg-open $question & exit
		;;
		"apri file manager"| "open file manager") #xdotool   search --class dolphin   key ctrl+a
		xdg-open "$HOME" & exit
		;;
		"apri cartella documenti"| "open folder documents") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/DOCUM/{gsub(/XDG_DOCUMENTS_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		xdg-open "$question"& exit
		;;
		"play music folder"| "riproduci cartella musica") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/MUSIC/{gsub(/XDG_MUSIC_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z $(type vservice ) ]] ; then vservice folder "$question" && qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause ; else $"To use this function you need to install vlc and vlc append service menu . you can find it on kde-apps"; fi 
		;;
		"player stop"|"lettore stop")
		if [[ ! -z $(qdbus | grep vlc ) ]] ; then qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause ; else echo $"Sorry , it seems you have started vlc without qdbus support please fix this , it could be fixed in this way just make sure your launcher has this in the command lin vlc --control dbus " ; exit 1; fi 
		;;
		"player next track"|"lettore prossima traccia")
		if [[ ! -z $(qdbus | grep vlc ) ]] ; then  qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next  ; else echo $"Sorry , it seems you have started vlc without qdbus support please fix this , it could be fixed in this way just make sure your launcher has this in the command lin vlc --control dbus " ; exit 1; fi 
		;;
		"player previous track"|"lettore traccia precedente")
		if [[ ! -z $(qdbus | grep vlc ) ]] ; then  qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous  ; else echo $"Sorry , it seems you have started vlc without qdbus support please fix this , it could be fixed in this way just make sure your launcher has this in the command lin vlc --control dbus " ; exit 1; fi 
		;;
		"player continue"|"lettore continua")
		if [[ ! -z $(qdbus | grep vlc ) ]] ; then qdbus org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Play ; else echo $"Sorry , it seems you have started vlc without qdbus support please fix this , it could be fixed in this way just make sure your launcher has this in the command lin vlc --control dbus " ; exit 1; fi 
		;;
		"apri cartella video"| "open folder video") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/VIDEOS/{gsub(/XDG_VIDEOS_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder documents it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		"open text editor"| "apri editor di testo")
		echo > /tmp/newfile.lst ; xdg-open '/tmp/newfile.lst'& exit
		;;
		"apri cartella documenti"| "open folder documents") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/DOCUM/{gsub(/XDG_DOCUMENTS_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder videos it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		"apri cartella musica"| "open folder music") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/MUSIC/{gsub(/XDG_MUSIC_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder music it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		"apri cartella download"| "open folder download") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/DOWNLOAD/{gsub(/XDG_DOWNLOAD_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder download it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		"apri cartella foto"| "open folder pictures") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/PICTURES/{gsub(/XDG_PICTURES_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder pictures it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		"apri cartella pubblica"| "open folder plublic") #xdotool   search --class dolphin   key ctrl+a
		if [[ -e "$HOME/.config/user-dirs.dirs" ]] ; then question="$(awk '/PUBLIC/{gsub(/XDG_PUBLICSHARE_DIR=|\"/,"");print}'  ~/.config/user-dirs.dirs)" ; else echo $"sorry no file  ~/.config/user-dirs.dirs , please install xdg stuff "; exit 1 ; fi  
 
		if [[ ! -z "$question" ]] ; then xdg-open "$question" ; else $"the folder public it's not set on this file ~/.config/user-dirs.dirs please fix this first. ";exit;  fi & exit
		;;
		
		"open text editor"| "apri editor di testo")
		echo > /tmp/newfile.lst ; xdg-open '/tmp/newfile.lst'& exit
		;;
		"traslate"| "traduci")
# 		outlang="$(awk '{ print $3  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )" #-o  "$outlang"
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		if $(type golgu-translate >/dev/null) ; then golgu-translate -d -s  -t "$question";else 
		echo $"please download and install golgu-traslate you can copy it into $HOME/bin or /usr/local/bin or /usr/bin";fi ; exit 
		;;
		"minitube")
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		minitube  "$question" & exit
		;;
		"youtube")
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		
		xdg-open 'http://www.youtube.com/results?search_query='"$question" & exit
		;; 
		"search image"| "cerca immagin")
		question="$(awk '{ for (i=3; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		
		xdg-open 'https://www.google.it/search?&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&q='"$question" & exit
		;;
		
		"search" |"cerca" )
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		xdg-open 'https://www.google.it/search?q='"$question"& exit
		;;
		"show webcam"|"show web cam" |"mostra webcam" | "mostra web cam")
		if [[ -z $webcamdevice  ]]; then  
			function_detect_webcam
			 
		fi 
		
		if [[ "$webcamdevice" != "none" ]]; then
		$binarywebcam -f video4linux2 -i "$webcamdevice" -video_size 320x240 & exit
		else 
		tput setaf 1
		echo $"
		sorry i was not able to detect your webcam if you have just plugged one in your computer try to remove old settings "
		tput setaf 8
		exit
		fi
		;;
		
		esac
		
	fi 
  


done
		if [[ "$DEBUG" == "on" ]]; then
 		set +x
		fi 


 
}

function_dictated(){
kate $HOME/golgu_dictated.lst 

katewid="$(xdotool  search --name golgu_dictated| head -1)"

xdotool  windowactivate $katewid
}

# rm mic.flac  > /dev/null 2>&1


VERSION="0.0.6"
DEVELOPER="nowardev@gmail.com"
DEBUG="off"
DEFAULT_INPUT_LANG="en-us"
DEFAULT_MICROPHONE="hw:0,0"
DEFAULT_MIC_CHANNEL="1"
RUNAPPLICATION="off"
PLAYTEXT="off"
TIMER="off"
logfile="$HOME/.config/golgu-speechtotext/golgu-speechtotext.log"
settingsfile="$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
function_check_program	
function_load_settings
# args=$@;  i=0
#  	if [[ -z $@ ]]; then
# 		function_help
# 		echo 
# 		echo $"err : need some input :S
# 		"
# 		exit 
# 	fi
	

 
 	while (( $# )); do 
	case $1 in 
	-h|--help|-\?) function_help; exit 0;;
	-i )  input_lang="$2" ; shift 2
	 echo $input_lang
	;;
	-l )  function_print_languages ; shift 1
	 exit
	;;
	-a) shift 1
	RUNAPPLICATION="on" 
	;;
	-c) channel="$2"; shift 2;;
	-m) microphone="$2";echo  $microphone ; shift 2;;
	-e) 
	echo $"type your terminal editor , nano vim kate gedit etc..press enter for nano"
	read   
	
	if [[ -z "$REPLY" ]];then
		nano "$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
	else
		$REPLY "$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
	fi
 
	exit ;;
 	
	-d) DEBUG="on"; shift;;
	-s) PLAYTEXT="on"; shift;;
	-ds) rm "$settingsfile"; shift ;echo $"settings file deleted." ; exit ;;
	-w) webcamdevice="$2" ; shift 2;;
	-k) function_show_keys ; exit ;;
	-log) cat "$logfile";exit ;  shift ;; 
	-t) TIMER="on"; time="$2"; shift 2;;
  
	-v) echo version $VERSION  developer $DEVELOPER; exit  ; shift;;
	-ws) SAVESETTINGS="on"; shift ;;
 
	*) args+=( "$1" ); shift ;;
		
	--) shift; echo "invalid option: $1" 1>&2; function_help; exit 1;;
	-*) echo "invalid option: $1" 1>&2; function_help; exit 1;;
	esac
	done
 
 
 
directory="$HOME/.config/golgu-speechtotext" 





if [[ !  -d "$directory"  ]] ; then
	mkdir "$directory" 
	
fi


if [[ -z "$input_lang" ]]; then 
 
	 input_lang=$DEFAULT_INPUT_LANG
else 


case "$input_lang" in 
"en-us"|"en"| "en-gb")
golgu_speak_languagecode="en"
 
;;
"it")
golgu_speak_languagecode="it"
 
;;

esac

fi 



if [[ -z "$channel" ]]; then 
	 channel=$DEFAULT_MIC_CHANNEL
fi

if [[ -z "$microphone" ]]; then
	function_detect_mic
	
# 	microphone="$DEFAULT_MICROPHONE"
 fi 
 
 


function_detect_ffmpegavplay
 
function_record "$HOME/.config/golgu-speechtotext/golgu-speechtotext.flac"
function_speechtotext "$HOME/.config/golgu-speechtotext/golgu-speechtotext.flac" "$input_lang" #"$output_lang" "$text"
function_display_text "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst"

if [[ ! -z $(grep -i -E 'computer|vaio' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" ) ]] ; then 
RUNAPPLICATION="on"
function_play_translated_text "en" "$USER, ok i will do $(awk '{gsub(/computer/,""); print}' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst") "

fi 
 
if [[ "$RUNAPPLICATION" == "on" ]]; then 
	language_open_browser="$input_lang"
	function_open_programs	
fi 
 
if [[ "$SAVESETTINGS" == "on" ]]; then 
	function_save_settings	
fi  

if [[ "$PLAYTEXT" == "on"  ]] ; then
function_play_translated_text "$golgu_speak_languagecode" "$(cat "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst")"
fi 