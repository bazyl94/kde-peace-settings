#!/bin/bash  
#license gpl 
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>
#nowardev 2013 nowardev@gmail.com
#


function_help(){

echo  $"  
	
WHAT IS IT ?

it's a script that records your voice with ffmpeg or avconv and it sends to google server to be converted into text.It can even performe some operation like open a browser show your webcam search for stuff on internet for now this function can be used only in english and italian :) 

TROUBLES WITH MIC : 

if you have some problems with the default mic or if you want use the webcam's mic you can set it in this way

-m hw:x,x , the  default one is hw:0,0

where x,x must a set of numbers , you can understand them reading your configuration

#########################################################
$(cat /proc/asound/pcm| grep -i capture )
#########################################################

if you get some problems recording audio just see this file $logfile, you could get some problem with ffmpeg \ avcon because some mic require 2 channels some other require 1 channel mono...

INSTALLATION 

you need of  :

ffmpeg or avconv awk 

for debian systems :
	
	sudo apt-get install awk ffmpeg #avconv


LANGUAGES 

it supports these languages some code could be wrong ... :
	
af sq ar az eu bn be bg ca zh-CN  zh-TW hr cs da nl en eo et tl fi fr gl ka de el gu Creole iw hi hu is id ga it ja kn ko la lv lt mk ms mt no fa pl pt ro ru sr sk sl es sw sv ta te th tr uk ur vi cy yi

USAGE:

golgu-speechtotext  <options>  

-a : function run applications and commands activated , for keys look down  ...
-c : set channels , some mic require 2 channels some others require 1 channel to work properly with ffmpeg
-e : open golgu-speechtotext config file 
-h : print this help 
-l : print languages and exit 
-i : set input language 
-v : print version and exit 
-w : set webcam device to use , example : -w /dev/video0
-ws: write settings on config file located here $HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg

########
EXAMPLES
########
 
 
 
------------------------
golgu-speechtotext -i en-us 
------------------------

------------------------
golgu-speechtotext -i en-us -c 
------------------------

#######################################
FUNCTIONS RUN APPLICATIONS AND COMMANDS 
#######################################

this function if activated can run applications and do some stuff ... like open the browser or show your webcam , if you have more than one it will ask you to pick one .. 

------------------------
golgu-speechtotext -i en-us -a
------------------------

key words :

open browser 
search for 
show webcam 
open text editor
what time is it 
suspend computer

"
}

function_print_languages(){
echo $"This is a language table : IT COULD BE NOT SO GOOD ... "

echo "
LANGUAGE TABLE 
#######################################
#note not all  languages are supported#
#######################################

af          Afrikaans                                                                     
ak          Akan
sq          Albanian
am          Amharic
ar          Arabic
hy          Armenian
az          Azerbaijani
eu          Basque
be          Belarusian
bem         Bemba
bn          Bengali
bh          Bihari
xx-bork     Bork, bork, bork!
bs          Bosnian
br          Breton
bg          Bulgarian
km          Cambodian
ca          Catalan
chr         Cherokee
ny          Chichewa
zh-CN       Chinese (Simplified)
zh-TW       Chinese (Traditional)
co          Corsican
hr          Croatian
cs          Czech
da          Danish
nl          Dutch
xx-elmer    Elmer Fudd
en          English
eo          Esperanto
et          Estonian
ee          Ewe
fo          Faroese
tl          Filipino
fi          Finnish
fr          French
fy          Frisian
gaa         Ga
gl          Galician
ka          Georgian
de          German
el          Greek
gn          Guarani
gu          Gujarati
xx-hacker   Hacker
ht          Haitian Creole
ha          Hausa
haw         Hawaiian
iw          Hebrew
hi          Hindi
hu          Hungarian
is          Icelandic
ig          Igbo
id          Indonesian
ia          Interlingua
ga          Irish
it          Italian
ja          Japanese
jw          Javanese
kn          Kannada
kk          Kazakh
rw          Kinyarwanda
rn          Kirundi
xx-klingon  Klingon
kg          Kongo
ko          Korean
kri         Krio (Sierra Leone)
ku          Kurdish
ckb         Kurdish (SoranÃ®)
ky          Kyrgyz
lo          Laothian
la          Latin
lv          Latvian
ln          Lingala
lt          Lithuanian
loz         Lozi
lg          Luganda
ach         Luo
mk          Macedonian
mg          Malagasy
ms          Malay
ml          Malayalam
mt          Maltese
mi          Maori
mr          Marathi
mfe         Mauritian Creole
mo          Moldavian
mn          Mongolian
sr-ME       Montenegrin
ne          Nepali
pcm         Nigerian Pidgin
nso         Northern Sotho
no          Norwegian
nn          Norwegian (Nynorsk)
oc          Occitan
or          Oriya
om          Oromo
ps          Pashto
fa          Persian
xx-pirate   Pirate
pl          Polish
pt-BR       Portuguese (Brazil)
pt-PT       Portuguese (Portugal)
pa          Punjabi
qu          Quechua
ro          Romanian
rm          Romansh
nyn         Runyakitara
ru          Russian
gd          Scots Gaelic
sr          Serbian
sh          Serbo-Croatian
st          Sesotho
tn          Setswana
crs         Seychellois Creole
sn          Shona
sd          Sindhi
si          Sinhalese
sk          Slovak
sl          Slovenian
so          Somali
es          Spanish
es-419      Spanish (Latin American)
su          Sundanese
sw          Swahili
sv          Swedish
tg          Tajik
ta          Tamil
tt          Tatar
te          Telugu
th          Thai
ti          Tigrinya
to          Tonga
lua         Tshiluba
tum         Tumbuka
tr          Turkish
tk          Turkmen
tw          Twi
ug          Uighur
uk          Ukrainian
ur          Urdu
uz          Uzbek
vi          Vietnamese
cy          Welsh
wo          Wolof
xh          Xhosa
yi          Yiddish
yo          Yoruba
zu          Zulu
"

}



function_check_program(){
	

program[1]=awk
 

requiresome[0]=ffmpeg
requiresome[1]=avconv
 
# accessories[0]="klipper"
# accessories[1]="xclip"

for program in "${program[@]}"; 
do if ! type -p "$program" >/dev/null;
 then echo "$program not found; PLEASE INSTALL IT" >&2
echo "error exiting..." >&2
echo 
 
echo "For debian : 

sudo apt-get install   gawk  ffmpeg  # vlc "
 exit 1; 
fi; done

test=0
for program in "${requiresome[@]}"; 
do if ! type -p "$program" >/dev/null; then 
test=$(($test+1))
 
fi 

done

if [[ "$test" = 2 ]]; then 
		echo "$program not found; PLEASE INSTALL IT" >&2
 		echo "For debian : sudo apt-get install ${requiresome[@]}  "
fi 


test=0
 
  
 
	
}

function_detect_mic(){


i=0
while read line ;do
audiocard[$i]="$line"
i=$(($i+1))
done< <(awk -F '[:-]' '/capture/{printf "hw:%d,%d\n", $1,$2}' /proc/asound/pcm)

i=0
while read line ;do
audionamecard[$i]="$line"
i=$(($i+1))
done< <(awk -F':' '/capture/{sub(/ /,"") ;print $3}' /proc/asound/pcm)

 
if [[ ${#audiocard[@]} >1 ]]; then 
echo $"I have detected more than 1 microphone in your computer please select what you want use (0-$((${#audiocard[@]}-1)))
"

 
 
i=0
for (( i=0 ; i <${#audiocard[@]};i++)); do 
    echo $"Choose $i for this audio card:  ${audionamecard[$i]} "

done

 
read   
 
    if [[ -z "$REPLY" ]];then
        microphone="${audiocard[0]}"
    else
    echo $"MicroPhone selected "${audionamecard["$REPLY"]}"  "${audiocard["$REPLY"]}""
       microphone="${audiocard["$REPLY"]}"
    fi
    
REPLY=""
else
 microphone="${audiocard[0]}"
 fi 
}



function_detect_ffmpegavplay(){
if [[ -z "$(type -p ffmpeg)" ]] ; then 
	if [[ -z "$(type -p avconv)" ]] ; then  kdialog --passivepopup $"FFmpeg or AVconv is not present in your system please install it "; else binary="$(type -p avconv)"; binarywebcam="$(type -p avplay)" ; fi  
		else 
			binary="$(type -p ffmpeg)"
			binarywebcam="$(type -p ffplay)"
		fi 
}

function_detect_webcam(){
i=0
	while read line ;do
		webcamdetected[$i]="$line"
		i=$(($i+1))
	done< <(ls /dev | grep video)
	if [[ -z ${webcamdetected[@]}  ]] ; then 
		echo "no webcam detected ... plugin ? driver? bug?"
		webcamdevice="none"
	elif [[ ${#webcamdetected[@]} >1 ]] ; then 
		echo $"I have detected more than 1 webcam please select on (0-$((${#webcamdetected[@]}-1))) 
"
	i=0
	for (( i=0 ; i <${#webcamdetected[@]};i++)); do 
		echo $"Choose $i for this webcam:  ${webcamdetected[$i]} "

	done
		read 
		

	if [[ -z "$REPLY" ]];then
		echo $"No answer sorry exiting.."
		exit
	else
		webcamdevice="/dev/"${webcamdetected[$REPLY]}""
		
	fi
	REPLY=""
	echo
	fi
}



function_save_settings(){

directory="$HOME/.config/golgu-speechtotext" 
if [[ !  -d "$directory"  ]] ; then
	mkdir "$directory"
else
 
	echo "input_lang=\"$input_lang\"" > "$directory/golgu-speechtotext.cfg"
 
	echo "microphone=\"$microphone\"" >> "$directory/golgu-speechtotext.cfg"
	echo "webcamdevice=\"$webcamdevice\"" >> "$directory/golgu-speechtotext.cfg"
	echo "channel=\"$channel\"" >> "$directory/golgu-speechtotext.cfg"
	
# 	echo "CLIPBOARD=\"$CLIPBOARD\"" >> "$directory/golgu-speechtotext.cfg"
# 	fi 
fi 
 }
function_ask_settings(){
 
echo $"Choose your language: en-us it fr de a pseudo corret list can be read typing golgu-speechtotext -l PRESS ENTER for en-us"
read   

    if [[ -z "$REPLY" ]];then
        input_lang="en-us"
    else
        input_lang="$REPLY"
    fi
REPLY=""
echo

echo $"Choose how many channels has your mic ? PRESS ENTER FOR 1 or any key for 2 "
read   

    if [[ -z "$REPLY" ]];then
    
        channel="1"
    else
	testvariable="$REPLY"
		if [[ -z "$testvariable" ]]; then
			echo $"EMPTY CHANNEL SETTING IT TO 1"
    
		elif  [[ "$testvariable" != *[!0-9]*  ]] ;then
			echo $"MUST BE A NUMBER 1 OR 2  CHANNEL SETTING IT TO 1"
			channel="$testvariable"
		else
			echo  $"MUST BE A NUMBER 1 OR 2  CHANNEL SETTING IT TO 1 ...you have written "\" $testvariable \"" "
		exit 2
    
		fi 
		
    fi
    
 
REPLY=""
echo
	
	function_detect_mic
	function_detect_webcam
	function_save_settings
	function_load_settings
}

function_load_settings(){
	a="$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg" 
	if [[  -e "$a"  ]] ; then
	. "$a"  
		if [[ -z $microphone ]] ; then 
		function_ask_settings
		fi 
	else 

	function_ask_settings
	fi 

}


function_record(){
#$1 recording file

echo $"Recording from $microphone Please press CTRL C to stop recording .... "
if [[ "$DEBUG" == "on" ]] ; then 
echo "$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1""
fi 
$binary  -f  alsa  -ac $channel -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>"$logfile" 

if [[ -z "$( awk '/cannot set channel count to 1/{print}' "$logfile")"  ]]; then 
$binary  -f  alsa  -ac 2 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>"$logfile" 
elif [[ -z "$( awk '/cannot set channel count to 2/{print}' "$logfile")"  ]]; then 
$binary  -f  alsa  -ac 1 -i $microphone -ar 16000 -acodec flac -vn -y "$1" 2>"$logfile" 

fi 
}
 
 
 
function_speechtotext(){
#$1 file flac to sent to google 
#$2 language
if [[ $DEBUG="on" ]] ; then 
echo "
wget -q -U \"Mozilla/5.0\" --post-file \"$1\" --header \"Content-Type: audio/x-flac; rate=16000\" -O - \"http://www.google.com/speech-api/v1/recognize?lang=\"$2\"&client=chromium\" | cut -d\" -f12  >\"$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst\""
fi 

wget -q -U "Mozilla/5.0" --post-file "$1" --header "Content-Type: audio/x-flac; rate=16000" -O - "http://www.google.com/speech-api/v1/recognize?lang="$2"&client=chromium" | cut -d\" -f12  >"$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst"
}


function_display_text(){
echo "
Text Detected: 
"
cat "$1"
echo 

}

function_open_programs(){
 
enus=("open browser" "open text editor" "show webcam" "shut down computer" "hibernate computer" "suspend computer" "open link" "select all" "copy text" "paste text" "delete text" "what time is it" "search" )

it=("apri browser" "apri editor di testo" "mostra webcam" "mostra web cam" "chiudi computer" "iberna computer" "sospendi computer" "apri link" "seleziona tutto" "copia testo" "incolla testo" "cancella testo" "che ora" "cerca"  )

case "$language_open_browser" in 
"en-us"|"en"| "en-gb")
golgu_translate_languagecode="en"
variable=("${enus[@]}")
;;
"it")
golgu_translate_languagecode="it"
variable=("${it[@]}")
;;

esac



# awk -v test="$browser" '$0 ~ test {print}'


 
for r in "${variable[@]}" ; do

	if [[ ! -z "$(grep -i "$r"   "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst")" ]]; then
		if [[ "$DEBUG" == "on" ]]; then
		echo "running function launch application and run command : grep -i "$r"   \"$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst\""
		fi 
		case $r in 
		
		"suspend computer"|"sospendi computer")
		dbus-send --print-reply --dest='org.freedesktop.PowerManagement' /org/freedesktop/PowerManagement org.freedesktop.PowerManagement.Suspend
		;;
# 		"shut down"|"chiudi computer")
# 		dbus-send --print-reply --system --dest='org.freedesktop.PowerManagement' /org/freedesktop/PowerManagement org.freedesktop.PowerManagement.Shutdown /usr/lib/x86_64-linux-gnu/qt4/bin/qdbus --system org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
# 		;;
		"what time is it" |"che ora" )
		 if [[ ! -z $(type golgu-translate) ]];then golgu-translate -s -i $golgu_translate_languagecode -o $golgu_translate_languagecode -t $(date +"%I:%M" ) ;exit ; else date +"%I:%M";  fi 
		;;
		"open browser" |"apri browser" )
		xdg-open 'https://duckduckgo.com/'
		;;
		"open text editor"| "apri editor di testo")
		echo > /tmp/newfile.lst ; xdg-open '/tmp/newfile.lst'
		;;
		"search" |"cerca" )
		question="$(awk '{ for (i=2; i<=NF; i++)  printf "%s ",$i  }' "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst" )"
		xdg-open 'https://duckduckgo.com/?q='"$question"'&v=n'
		;;
		"show webcam"|"show web cam" |"mostra webcam" | "mostra web cam")
		if [[ -z $webcamdevice  ]]; then  
			function_detect_webcam
			 
		fi 
		
		if [[ "$webcamdevice" != "none" ]]; then
		$binarywebcam -f video4linux2 -i "$webcamdevice" -video_size 320x240
		else 
		echo $"sorry i was not able to detect your webcam if you have just plugged one in your computer try to remove old settings "
		fi
		;;
		
		esac
		
	fi 
  


done



 
}

# rm mic.flac  > /dev/null 2>&1


VERSION="0.0.1"
DEVELOPER="nowardev@gmail.com"
DEBUG="off"
DEFAULT_INPUT_LANG="en-us"
DEFAULT_MICROPHONE="hw:0,0"
DEFAULT_MIC_CHANNEL="1"
RUNAPPLICATION="off"
logfile="$HOME/.config/golgu-speechtotext/golgu-speechtotext.log"
settingsfile="$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
function_check_program	
function_load_settings
args=$@;  i=0
 	if [[ -z $@ ]]; then
		function_help
		echo 
		echo $"err : need some input :S
		"
		exit 
	fi
	

 
 	while (( $# )); do 
	case $1 in 
	-h|--help|-\?) function_help; exit 0;;
	-i )  input_lang="$2" ; shift 2
	 echo $input_lang
	;;
	-l )  function_print_languages ; shift 1
	 exit
	;;
	-a) shift 1
	RUNAPPLICATION="on" 
	;;
	-c) channel="$2"; shift 2;;
	-m) microphone="$2";echo  $microphone ; shift 2;;
	-e) 
	echo $"type your terminal editor , nano vim kate gedit etc..press enter for nano"
	read   
	
	if [[ -z "$REPLY" ]];then
		nano "$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
	else
		$REPLY "$HOME/.config/golgu-speechtotext/golgu-speechtotext.cfg"
	fi
 
	exit ;;
 	
	-d) DEBUG="on"; shift;;
	-ds) rm "$settingsfile"; shift ;echo $"settings file deleted." ; exit ;;
	-w) webcamdevice="$2" ; shift 2;;
 
	-v) echo version $VERSION  developer $DEVELOPER; exit  ; shift;;
	-ws) SAVESETTINGS="on"; shift ;;
 
	*) args+=( "$1" ); shift ;;
		
	--) shift; echo "invalid option: $1" 1>&2; function_help; exit 1;;
	-*) echo "invalid option: $1" 1>&2; function_help; exit 1;;
	esac
	done
 
 
 
directory="$HOME/.config/golgu-speechtotext" 





if [[ !  -d "$directory"  ]] ; then
	mkdir "$directory" 
	
fi






if [[ -z "$input_lang" ]]; then 
 
	 input_lang=$DEFAULT_INPUT_LANG 
fi 



if [[ -z "$channel" ]]; then 
	 channel=$DEFAULT_MIC_CHANNEL
fi

if [[ -z "$microphone" ]]; then
	function_detect_mic
	
# 	microphone="$DEFAULT_MICROPHONE"
 fi 
 
 


function_detect_ffmpegavplay
 
function_record "$HOME/.config/golgu-speechtotext/golgu-speechtotext.flac"
function_speechtotext "$HOME/.config/golgu-speechtotext/golgu-speechtotext.flac" "$input_lang" #"$output_lang" "$text"
function_display_text "$HOME/.config/golgu-speechtotext/golgu-speechtotext.lst"
 
if [[ "$RUNAPPLICATION" == "on" ]]; then 
	language_open_browser="$input_lang"
	function_open_programs	
fi 
 
if [[ "$SAVESETTINGS" == "on" ]]; then 
	function_save_settings	
fi  

 