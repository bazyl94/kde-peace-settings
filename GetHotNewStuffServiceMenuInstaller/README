#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>

#NowardevTeam nowardev@gmail.com

WHAT IS IT ? 

It's a script that can help you to install service menu on kde and it's compatible with GHNS 

there are 4 mode 

1 installation local 
2 installation system wide
3 deinstallation local 
4 deinstallation system wide


the functions will run if folders exist, deinstall modes are based on the files that are presents in the main folder , if there are /mainfolder/usr/bin/scripts it will remove /usr/bin/scripts etc.
 

HOW SHOUL I USE IT ?

you need to put install script in the main folder like you can see in this tree

we have

1 file .desktop 
1 bash script 
1 eventually the menu entry .desktop file 
1 install script :)
1 deinstall script that is the same of install 
other stuff like read me and license 


apt-peace-tool$ tree

apt-peace-tool/
|
├── deinstall
├── extra_bash_function_installation
├── install            <============================ this one 
├── LICENSE
├── README
└── usr
    ├── bin
    │   └── peace-debian-installer
    └── share
        ├── applications
        │   └── kde4
        │       └── aptk.desktop
        └── kde4
            └── services
                └── ServiceMenus
                    └── aptk-service.desktop

ADVANCED MODE 

as you can see there is extra_bash_function_installation

you can have :

extra_bash_function_installation
extra_bash_function_deinstallation

on these file you can create  extra functions if these file exist the main script will load them.

BUT YOU NEED TO USE THESE NAMES FOR EXTRA FUNCTIONS :

function_extra_install_global
function_extra_deinstall_global

function_extra_install_local
function_extra_deinstall_local

function_extra_install_wide
function_extra_deinstall_wide


the global function will be run on the deinstall or install process doesn't matter if you want install locally o system wide , then it will be loaded the local or wide functions 


infact in this particular example i have to do something more than only install the script i have added some extra function to it 

EXAMPLE  extra_bash_function_installation




function_extra_install_global(){
	
	if [[   -z $(cat "$HOME/.bashrc" | grep 'alias u="sudo apt-get update"
alias g="sudo apt-get upgrade"
alias gf="sudo apt-get upgrade -f"
alias gf="sudo apt-get dist-upgrade -f"
alias i="sudo apt-get install "
alias ai="apt-cache show  "
alias r="sudo apt-get remove "
alias p="sudo apt-get --purge remove "
alias s="apt-cache search "
alias a="sudo apt-get autoremove"' 2>/dev/null) ]]; then
		
		
		kdialog --title $"My App Title"  --yesno   $"do you want install the alias for apt? 
		
alias u='sudo apt-get update'
alias g='sudo apt-get upgrade'
alias gf='sudo apt-get upgrade -f'
alias gf='sudo apt-get dist-upgrade -f'
alias i='sudo apt-get install '
alias ai='apt-cache show  '
alias r='sudo apt-get remove '
alias p='sudo apt-get --purge remove '
alias s='apt-cache search '
alias a='sudo apt-get autoremove'

		
		" 2>/dev/null
		
		case "$?" in
		0) 
		
		echo '
alias u="sudo apt-get update"
alias g="sudo apt-get upgrade"
alias gf="sudo apt-get upgrade -f"
alias gf="sudo apt-get dist-upgrade -f"
alias i="sudo apt-get install "
alias ai="apt-cache show  "
alias r="sudo apt-get remove "
alias p="sudo apt-get --purge remove "
alias s="apt-cache search "
alias a="sudo apt-get autoremove"

		
		
		
peacei()
{
	cur=`_get_cword`
	COMPREPLY=( $( apt-cache pkgnames $cur 2> /dev/null ) )
	return 0
	
} &&
complete -F peacei $filenames i


peacep()
{
	cur=`_get_cword`
	COMPREPLY=( $( apt-cache pkgnames $cur 2> /dev/null ) )
	return 0
	
} &&
complete -F peacep $filenames p


peacer()
{
	cur=`_get_cword`
	COMPREPLY=( $( apt-cache pkgnames $cur 2> /dev/null ) )
	return 0
	
} &&
complete -F peacer $filenames r' >>~/.bashrc
		
		;;
		*)
		echo "Function executed"
		exit 
		;;
		esac
		echo "Function executed"
		exit
		# 		else 
		# 	
		# 			kdialog --title $"My App Title"  --passivepopup  $"I will not add apt-get shortcuts because you have already on your ~/.bashrc file " 3 2>/dev/null
		fi 
}
Copyright (C) 2012 nowardev@gmail.com.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled \"GNU
Free Documentation License\" here http://www.gnu.org/licenses/fdl-1.3.txt