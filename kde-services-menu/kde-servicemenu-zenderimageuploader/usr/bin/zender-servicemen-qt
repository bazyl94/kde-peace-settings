#!/bin/bash
Version="0.0.1"
#Copyright (C) 2012 nowardev nowardev@gmail.com

#This file is part of kde-peace-settings.

#kde-peace-settings is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#


function_help (){
	
	message=$"$scriptname is released with license $lincense 
	
USAGE  :
	
$scriptname -h print this help                 No X server
$scriptname -hx print this help                With X server
$scriptname -f <file1> <file2> ..              Add files to upload list
$scriptname -fo <folder1> <folder2>...         Add Folders to upload list
$scriptname -fox <folder1> <folder2>...        Add Folders to upload list  
$scriptname -e                                 Edit upload list with nano
$scriptname -ek                                Edit upload list with kate  
$scriptname -d                                 DELETE convesion list
$scriptname -r                                 RESTORE you old upload list
$scriptname -mx                                start the kdialog menu  
$scriptname -wx                                start the script for servers
	
	"
}

function_create_servicemenufolder () {
	if [[ "$kdehome" == "$HOME/.local/" ]] ; then
		
				if [[ ! -d "$HOME/.local/share/apps" ]]; then 
				mkdir "$HOME/.local/share/apps"
				mkdir "$servicemenufolder"
				fi
		
	else 
				if [[ ! -d "$servicemenufolder" ]]; then 
				mkdir "$servicemenufolder"
				fi
	fi 
	
}
# 
# function_save_login_and_password () {
# # 	function_yesno $"Do you want set server login and passwords ?"
# # 	if [[ "$ans" == "yes" ]]; then 
# # 	
# # 	fi 
# 
# function_ask_stuff $"Please "
# 	
# }

function_check_settings() {
	if [[ -z  "$commonformats" || -z "$preferedserver" ]]; then 
		function_create_settings
	fi 
}

function_create_settings () {
	function_create_servicemenufolder 

	commonformats="jpeg jpg png bmp gif tiff tif "
	
	if [[ -z "$pidofx" ]]; then 
			read -p $"You can search for photos in a folder i will detect this formats $commonformats if you want only jpeg files you should set only jpeg because the loop will be faster ...PRESS ENTER IF YOU DON'T WANT BE BORED FROM THIS QUESTION"
				if [[ -z "$REPLY" ]];then
					commonfomats="jpeg jpg png bmp gif tiff tif "
				else 
					commonfomats="$REPLY"
				fi
			REPLY=""
			echo 
			echo  $"Aviable Servers : 
			
			"$scriptservers""
			echo
			read -p $"Choose your prefered server you can pick one of previous :"
				if [[ -z "$REPLY" ]];then
					preferedserver="$defaultserver"
				else 
					preferedserver="$REPLY"
				fi
			REPLY=""
	
	else 
		
		commonformats="$(kdialog --title $"Kind of files you want detect "   --textinputbox   $"Select the formats Image Uploader service menu should detected when you would like add a folder" "bmp gif jpeg jpg pgm png pnm svg tif tiff")"
		
		preferedserver="$(kdialog --title $"$title"  --combobox $"Choose your prefered server you can pick one of these:" "${servers[@]}")"
	
	fi 
	function_add_login_and_password
	function_load_settings
	
	echo "Common Formats:$commonformats" >"$settingsfile"
	echo "Default Server:$preferedserver" >>"$settingsfile"
}

function_load_settings () {
	
	if [[ ! -e "$settingsfile" ]]; then 
		function_create_settings
	fi 
	commonformats="$(awk -F':' '/Common Formats:/{print $2}' $settingsfile)"
 	preferedserver="$(awk -F':' '/Default Server:/{print $2}' $settingsfile)"
	aserver=(); alogin=();apas=();	i=0; while IFS=/ read -a line ; do aserver[$i]="${line[0]}";alogin[$i]="${line[1]}" ;apass[$i]="${line[2]}"; i=$(($i+1)) ; done<"$decryptedfile"
	
	 
	
}

function_encrypt_password () {
	openssl des3 -salt -in "$passwordfile" -out "$encryptedfile"
	rm "$passwordfile" 
}

function_decrypt_password () {
	  
	openssl des3 -d -salt -in "$encryptedfile" -out "$decryptedfile"
}

function_add_login_and_password () {
	function_decrypt_password
		if [[ -e "$passwordfile" ]];then 
		rm "$passwordfile"
		fi 
	mv "$decryptedfile"  "$passwordfile"
	function_ask_stuff_combo $"Choose a Server" $listservers
	function_ask_stuff $"Insert the Login if the server doesn't need it leave it empty"
	function_ask_stuff $"Insert the Password if the server doesn't need it leave it empty"
	echo "$newserver/$newlogin/$newpassword" >>"$passwordfile"
	function_encrypt_password
	function_delete_password_and_temp_file
	
}

function_ask_stuff () {
	
	if [[ -z "$pidofx" ]]; then
	read  -p  "$1"

	else
		kdialog --title "$scriptname" --textinputbox "$1" 
		
	fi 
}
function_ask_stuff_combo () {
	
	if [[ -z "$pidofx" ]]; then
	read  -p  "$1 aviable servers $2"

	else
		kdialog --title "$scriptname" --combobox "$1" $2
		
	fi 
}

function_delete_password_and_temp_file () {
	if [[ -e "$passwordfile" ]];then 
		rm "$passwordfile"
	fi 
	
	if [[ -e "$decryptedfile" ]];then 
		rm "$decryptedfile"
	fi 
	

	
}
function_check_program(){
	
	if [[ -z "$pidofx" ]] ; then

	program[0]=openssl
	program[1]=imgupload
	program[2]=awk
	for program in "${program[@]}";
	do if ! type -p "$program" >/dev/null;
	then echo "$program not found; PLEASE INSTALL IT" >&2
	echo "error exiting..." >&2
	exit 1;
	fi; done

	else

	program[0]=openssl
	program[1]=imgupload
	program[2]=kdialog
	program[3]=awk
	for program in "${program[@]}";
	do if ! type -p "$program" >/dev/null;
	then kdialog --msgbox $"$program not found; PLEASE INSTALL IT" >&2
	echo "error exiting..." >&2
	exit 1;
	fi; done
	
fi
	
}


function_set_antix (){

pidofx=""
}

function_open_text_file () {

if [[ -z "$pidofx" ]]; then
nano "$1"
else
kde-open "$1"

fi
}

function_info_message () {

if [[ -z "$pidofx" ]]; then
echo "$1"
else
kdialog --title $"IMGuploader Dolphin Service Menu" --msgbox "$1"

fi



}


function_yesno (){
	
	if [[ -z "$pidofx" ]]; then
		read -p "$1" ans
		
# 		case "$REPLY" in
# 		"$2")
# 		;;
# 		*)
# 		ans="$3"
# 		esac 
	else 
		ans=$(kdialog --title "$title" --yesno "$1")
	fi
}

function_message(){
if [[ -z "$pidofx" ]] ; then

echo "$1"

else

kdialog --msgbox "$1"
fi


}


function_message_error(){

if [[ -z "$pidofx" ]] ; then

echo "ERROR! $1"

else

kdialog --error "$1"
fi


}

function_add_folder () {

while read line ;do
for extension in $commonformats ; do

if [[ "$line" == *.$extension ]] ; then
echo $"adding $line"
echo "$line" >>"$listoffiles"
fi
done

done< <(find "$1" -type f)

}

function_create_progressbar () {
	mystufvariabletouseonmyscript=$(kdialog --title "$title"  --progressbar $"Starting uploading..." 100)

	qdbus $mystufvariabletouseonmyscript org.kde.kdialog.ProgressDialog.autoClose true

	qdbus $mystufvariabletouseonmyscript  showCancelButton true
}

function_get_servers_list () {
if [[ "$detectservers" == "true" ]]; then 
a=1;while read z ; do servers[$a]="$z";a=$(($a+1));done< <(imgupload --list 2>&1| awk ' !/Zenden Image Uploader console/{printf("%s  \n" , $0)}')
scriptservers="${servers[@]}"
else 
scriptservers="$listofserversinternal"
fi 
echo $scriptservers


}



function_standard_upload(){
	echo >"$linkfile"
	echo -n $(date) >> "$linkfile"
	echo -n $1 >> "$linkfile"
	imgupload --server "$server" "$1" >> "$linkfile"
	
}

function_loop_nologin() {
	echo >"$linkfile"
	while read line
		do
			echo -n $1 >> "$linkfile"	
			imgupload --server "$server" "$line" >> "$linkfile"
			echo   >> "$linkfile"
		done<"$listoffiles"
	
	
}




function_loop_login() {
	echo >"$linkfile"
	echo -n $(date) >> "$linkfile"
	while read line
		do
			echo -n $1 >> "$linkfile"	
			imgupload --server "$server" --login "$login" --password "$password" "$line" >> "$linkfile"
			echo   >> "$linkfile"
		done<"$listoffiles"
	
	
}

function_delete (){
if [[ -e "$listoffiles"    ]] ; then #&& -e "$templog"


function_passivepopup "mv "$listoffiles"  $HOME/.local/share/Trash/files/
mv "$templog"  "$HOME"/.local/share/Trash/files/ "
mv "$listoffiles"  $HOME/.local/share/Trash/files/
#mv "$templog"  "$HOME"/.local/share/Trash/files/
# function_passivepopup_test $"Old list  $listoffiles deleted and Old log $templog deleted"
# 
# elif [[ ! -e "$listoffiles" ]] ; then
# function_passivepopup_test $"i can't do it i can't find the file $listoffiles"
# elif [[ ! -e "$templog" ]] ; then
# function_passivepopup_test $"i can't do it i can't find the file $templog"
else
function_passivepopup_test $"i can't do it i can't find the file  $listoffiles   

Please add some files to $listoffiles? 

run this :

$scriptname -f file1 file2 file3

or if you prefer add a folder 

$scriptname -fo folder1 folder2 folder3
"
fi



if [[ -z $1 ]] ; then 
    function_menu_start
elif [[ "$1" == "silent" ]] ; then
echo 
fi 
 
}

function_search_kdehome (){
	if [[ -d "$HOME/.kde" ]]; then 
		kdehome="$HOME/.kde"
	elif [[ -d "$HOME/.kde4" ]]; then 
		kdehome="$HOME/.kde4"
	else
		kdehome="$HOME/.local"
	fi
echo "Kde home is $kdehome"
}


function_menu_start_standard (){
	ansmainmenu=$(kdialog --title "$title" --menu $"Choose An Option"   ud $"Start Upload in the default server" ul $"Start Upload With Login" uwl $"Start Upload Without Login" ol $"Open List" olf $"Open Links File" alp $"Add a Logins and passwords to your encrypted file" e $"Edit Settings" h $"Help" q $"Exit")
	
}

function_menu_start_antix () {
	clear
	tput cup 3 14
	tput setaf 2


echo "Img Uploader Dolphin service menu cli"

tput cup 5 17 
tput rev 
echo $"Img Uploader Dolphin Service Menu"
tput sgr0


menutext=( $" Add Files" $" Add Folders" $" Start Upload in the default server"  $" Start Upload With Login" $" Start Upload Without Login" $" Open List File" $" Open Links File" $" Add a Logins and passwords to your encrypted file" $" Edit Settings"  $" Help" $" Exit" ) 
 
 
 menulabel=(af afo ud ul uwl ol olf alp e h q)

 


a=0
b=7
echo 
for menut in "${menutext[@]}" ; do 
c=$(($b+$a))

tput cup $c 16
echo "$(($a+1)). ${menutext[$a]}"
a=$(($a+1))
 
done




tput bold
tput cup $(($c+2)) 16
read -p $"Enter Your Choice (1-"$a")" choice


tput sgr0 
# if ! [[ "$choice" =~ [[:digit:]] ]] ;then 
# function_menu_start
# fi 
ansmainmenu="${menulabel[$(($choice-1))]}"
echo $message
echo $ansmainmenu
	
}

function_menu_start(){
	
	if [[ -z "$pidofx" ]]; then
	function_menu_start_antix
	else
	function_menu_start_standard		
	fi 
	
}
# 
# function_ansmainmenu () {
# 	case "$ansmainmenu" in 
# 	addf
# 	addfolder
# 	
# 	;;
# }

########START SCRIPT##############################
function_search_kdehome
 
lincense="GPLv3"
scriptname="imgupload-peace-servicemenu"
pidofx="$(pidof X)"
defaultserver="rapidshare.com"
detectservers="true" #you can set it false and ti will load like servers listofserversinternal
listofserversinternal=(10pix.ru "FTP Server" ImageBan.ru Imageshack.us ImgFiles.Ru Immage.de "Picasa WebAlbums" Yandex.Fotki Yandex.Narod bayimg.com directupload.net epikz.net fastpic.ru funkyimg.com habreffect.ru iPicture.ru iceimg.com image2you.ru imagevenue.com imgur.com keep4u.ru multi-up.com p2p.dm photoload.ru pikucha.ru pinpic.ru pix.am radikal.ru rapidshare.com rghost.ru sendspace.com share.te.ua twitpic.com uploadbox.com vfl.ru youpic.su zalil.ru)
function_get_servers_list
listoffile="$HOME/.$scriptname-list.lst"
servicemenufolder="$kdehome/share/apps/$scriptname-qt"
linkfile="$kdehome/share/apps/$scriptname/links.lst"
settingsfile="$kdehome/share/apps/$scriptname/settings.lst"
encryptedfile="$kdehome/$scriptname-encrypt"
decryptedfile="$kdehome/$scriptname-tempfile"
passwordfile="$kdehome/$scriptname-tempfile-p"
if [[ -e "$listoffiles" ]]; then 
numberoffiles=$(wc -l <"$listoffiles")
else
	numberoffiles=0
fi

echo "$kdehome/share/apps/$scriptname/links.lst"

if  [[ $1 == -*  ]]; then
	case "$1" in
	-h|--help|-\?) function_help; exit 0;;
	-hx) function_help x; exit 0;;
	  
	-f) if (($# > 1)); then
			shift ;for file in "$@"; do
		echo "$file" >>"$listoffiles"

		done
		  else
			echo $"-f requires files" 1>&2
			exit 1
		  fi ;;
		  
	-fo) if (($# > 1)); then
			shift ;for folder in "$@"; do
		function_add_folder_shell "$folder"  
		done
		  else
			echo $"-f requires a folder at least" 1>&2
			exit 1
		  fi ;;
		 -fox)if (($# > 1)); then
			shift ;for folder in "$@"; do
		function_add_folder "$folder"  
		done
		  else
			kdialog --error $"-f requires a folder at least" 1>&2
			exit 1
		  fi
		 ;;
 
	-e)  nano "$listoffiles"
	;;
	-ek)  kate "$listoffiles"
	;;
 
 
	-wx)
 
	function_set_antix
	function_check_program
	function_load_settings
	function_check_settings
	function_menu_start
	;;
	-mx)

	function_check_program
	function_load_settings
	function_check_settings
	function_menu_start
	;;
	-r) 
	function_restore
	;;
 
	--) shift; echo "invalid option: $1" 1>&2; function_help; exit 1;;
	-*) echo "invalid option: $1" 1>&2; function_help; exit 1;;
	esac
else

function_help; exit 1
fi

 