#!/bin/bash 
#Copyright (C) 2013 nowardev nowardev@gmail.com
 
#This file is part of kde-peace-settings.
 
#kde-peace-settings is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.


configfile="$HOME/.config/kde-service-menu-nowardev-scanner.cfg"
tempfile="/tmp/kde-service-menu-scan-tempfile.ppm"
temppdf="/tmp/kde-service-menu-scan-tempfile.pdf"
tempfolder="/tmp/kde-service-menu-scan-folder"
lprparameters="-o fitplot"
version="0.6"



function_help(){
	echo "
This Service menu  let you to acquire a picture from your scanner directly in Dolphin, kde file manager. 
it should be able to detect your scanner settings if not just read  he manual of scanimage 

useful commands
scanimage -A 
scanimange -L 

USE :

Scanner Dolphin qt from command line 

kde-service-menu-nowardev-scanner -s /home/test/filename       Create a file
kde-service-menu-nowardev-scanner -sp                          Print an image from scanner
kde-service-menu-nowardev-scanner -sm /home/test/filename      Create a Multiple Files
kde-service-menu-nowardev-scanner -smpdf /home/test/filename   Create a pdf Multiple Pages
kde-service-menu-nowardev-scanner -smpdfp /home/test/filename  Create a pdf and Print it Multiple pages

CONFIG FILE 

Location : $configfile

device: hpaio:/usb/Officejet_4500_G510g-m?serial=CN113F81FP05CQ
resolution: 150
size X: 215 
size Y: 297 
mode: Color
format: jpeg
	
version: $version
"
}

function_check_programs(){
	program[1]=convert
	program[2]=awk
	program[3]=scanimage
	
	for program in "${program[@]}";do 
		
		if [[ -z $(type -p "$program") ]];then 
	 
				kdialog --error $"$program not found; PLEASE INSTALL IT" >&2
				echo "error exiting..." >&2
				exit 1;
 
		fi
	done
}


function_check_file(){
	if [[ -e "$1" ]]; then 
		echo $1
		echo $"File $1 exist! change name"
		kdialog --msgbox  $"File $1 exist , change name "
		exit 
	fi 
}



function_change_name() {
	if [[ -e "$1" ]]; then 
		echo $1
		echo $"File exist! change name"
		kdialog --textinputbox $"File Name # will be replace by number if file exist" $"New name #"
		
	fi 
	
	
	
}


function_detect_scanner(){
	d_device=$(echo "$detection1" | awk '/device/{print $2}')
	
}

function_detect_mode(){
	d_mode=($(echo "$detection2"| awk '/--mode/{split($2,a,/\|/); for (i in a) print a[i]}'))
	if [[ ! -z "${d_mode[1]}" ]]; then  defaultmode=""${d_mode[1]}""; else defaultmode="" ; fi 
}

function_detect_resolution(){
	
	d_resolution=($(echo "$detection2" | awk '/--resolution/{gsub(/dpi/,""); split($2,a,/\|/); for (i in a) print a[i]}'))
	if [[ ! -z "${d_resolution[1]}" ]]; then  defaultresolution="--default "${d_resolution[1]}" "; else defaultresolution="150" ; fi 
	s_resolutions=(50 100 150 200 250 300 350 400 550 600 1200 3600 )
}


function_check_file_settings(){
	
	if [[ -e "$configfile" ]]; then 
		
		device="$( awk  -F':' '/device: /{print $2}' "$configfile"   )" 
		
		mode="$( awk     -F':' '/mode: /{print $2}' "$configfile"  )" 
		resolution="$( awk     -F':' '/resolution: /{gsub(/ /,""); print $2}' "$configfile"  )" 
		format="$( awk     -F':' '/format: /{gsub(/ /,""); print $2}' "$configfile"  )" 
		xsize="$( awk     -F':' '/size X: /{gsub(/ /,""); print $2}' "$configfile"  )" 
		ysize="$( awk     -F':' '/size Y: /{gsub(/ /,""); print $2}' "$configfile"  )"
	else 
		kdialog --passivepopup $"No old configs found ...Detecting Settings .. wait"
		detection1="$(scanimage -L)"
		detection2="$(scanimage -A)"
		function_detect_scanner
		function_detect_mode
		function_detect_resolution
		
		
		if [[ ! -z "$d_device" ]]; then 	kdialog --passivepopup $"Found Device :) $d_device"; device="$d_device" ; else kdialog --error $"$(scanimage -L)

scanimage -L | awk '/device/{print $2}'

can't get the device if scanimage -L prints your device please fix the function:

function_detect_scanner

in this script $(type -p  kde-service-menu-nowardev-scanner) ";exit ;   fi 
			
		resolution="$(kdialog --combobox $"Choose resolution  
		
AVIABLE FOR YOUR SCANNER  ${d_resolution[*]}" "${s_resolutions[@]}" $defaultresolution -- )"
		mode="$(kdialog --textinputbox  $"Choose Mode 
AVIABLE FOR YOUR SCANNER ${d_mode[*]}" "$defaultmode" -- )"
		format="$(kdialog --combobox $"Choose Format" png jpeg jpg bmp tiff pdf  --default jpeg )"
		xsize="$(kdialog --textinputbox  $"Choose X size 215 = A4" 215)"
		ysize="$(kdialog --textinputbox  $"Choose Y size 297 = A4" 297)"
		notification="$(kdialog --combobox $"Enable Notifications" true false  --default true )"
		
		function_check_settings
		
		echo "device: "$device"" > "$configfile"
		echo "resolution: "$resolution"" >> "$configfile"
		echo "size X: $xsize " >> "$configfile"
		echo "size Y: $ysize " >> "$configfile"
		echo "mode: "$mode"" >> "$configfile"
		echo "format: "$format"" >> "$configfile"
		echo "notification: "$notification"" >> "$configfile"
	
	fi 
	
	if [[ ! -z $xsize && ! -z $ysize  ]] ; then scanimageparameters="-x $xsize -y $ysize" ; else scanimageparameters= "" ; fi 
}

function_check_settings(){
	
	if [[ -z "$device"  ]]; then
	kdialog --error  $"ERROR NO DEVICE DETECTED PLEASE FIX THIS TRY TO RUN on your terminal 
	scanimage -L 
	
	no device ... exiting "
	
	exit 
	
	elif [[ -z "$mode"  ]]; then
	kdialog --error  $"ERROR NO MODE DETECTABLE try to fix this typing 
	scanimage -A 
	
	no mode ... exiting "
	
	exit 
	
	elif  [[ -z "$resolution"  ]]; then
	kdialog --error  $"ERROR NO RESOLUTION DETECTABLE
	scanimage -A"
	fi 


}

function_print(){
	if [[ -z "$(lpstat -d )" ]]; then 
		kdialog --error $"You have not set a Default printer please set it up"
	else
		scanimage  $scanimageparameters  --resolution $resolution --mode $mode  > "$tempfile" 
		if [[ -e  "$tempfile"  ]]; then 
			kdialog --passivepopup  $"running this command: sscanimage  $scanimageparameters  --resolution $resolution --mode $mode  > "$tempfile" &&lpr $lprparameters  "$tempfile"
			
			"
			
			lpr $lprparameters  "$tempfile" 
		else
			kdialog --error $"$tempfile doesn't exist. this is the command
			
scanimage   --resolution $resolution --mode $mode  > "$tempfile"

and it generates empty file ?"
		fi 
	fi 
	
	
}

function_create_pdf(){
# hp-scan --adf -o /tmp/mymultipages.pdf

	kdialog --passivepopup  " scanimage  $scanimageparameters  --resolution $resolution --mode $mode  > "$tempfile" && convert "$tempfile" "${1%%.*}.$format""
        mkdir "$tempfolder"
        cd "$tempfolder"  ; scanimage -b --batch-count=n --source ADF --resolution $resolution --mode $mode  > "$tempfile"
        a=()
        for file in $tempfolder/*.ppm ; do 
        a=("${a[@]}" "$file")
        done 
        convert "${a[@]}" "${1%%.*}.$pdf"
        rm -R "$tempfolder"
}


function_create_pdf_and_print (){
#to fix this 
a="$1"
b="$2"

    function_create_pdf "$tempfolder/$2"
    lpr $lprparameters  "${1%%.*}.$pdf"
}

function_notify(){

if [[ $notification == "true" || -z $notification  ]] ; then 
	program[1]="notify-send"
	program[2]="kdialog"
# 	program[3]="echo"
	param[1]="-t 3000 "
	param[2]="--passivepopup --title \"kde-service-menu-nowardev-scan\""
# 	param[3]=""
	a=1
	set -x
for p in "${program[@]}";do 
    if [[ ! -z $(type -p "$p") ]];then
        NOTIFIER="${program[$a]} ${param[$a]}"
        break
    else
        a=$(($a+1))
    fi
    
done 

$NOTIFIER "$1" 
fi

}

function_create_multi_image(){
# hp-scan --adf -o /tmp/mymultipages.pdf
outfolder="$1"
basename="$2"
 
        
	$NOTIFIER  "KDE-service-menu-nowardev-scanner 
	
cd "$tempfolder"
scanimage -b --batch-count=n --source ADF --resolution $resolution --mode $mode
a=()
for f in $tempfolder/*.pnm ; do
name="${f##*}"
name="${name%%.*}"
convert "$f" "$outfolder/$basename-n.$format"
done 
rm -R "$tempfolder"  "
 
        mkdir "$tempfolder"
        cd "$tempfolder"  
        scanimage -b --batch-count=n --source ADF --resolution $resolution --mode $mode  
        a=()
        b=0
        for f in $tempfolder/*.pnm ; do
#             name="${f##*/}"
#             name="${name%%.*}"
            if [[ -e "$f" ]] ; then 
                function_check_file "$outfolder/$basename-$b.$format"
                convert "$f" "$outfolder/$basename-$b.$format" 
                b=$(($b+1))
            else 
                $NOTIFIER "no file in temp file something with scanner do not work! fix this!" 
            fi 
        done 
    rm -R "$tempfolder"
 
        }


function_start(){
	$NOTIFIER " scanimage  $scanimageparameters  --resolution $resolution --mode $mode  > "$tempfile" && convert "$tempfile" "${1%%.*}.$format""
	scanimage  $scanimageparameters  --resolution $resolution --mode $mode  > "$tempfile" 
	convert "$tempfile" "${1%%.*}.$format"
	
}



NOTIFIER="echo"
function_check_programs
set -x
function_check_file_settings
set +x 
function_notify
# 
# 
# 
# if  [[ $1 == -*  ]]; then
# 	case "$1" in
# 	-h|--help|-\?) function_help; exit 0;;
# 	
# 	  
# 	-s) if (($# > 1)); then
# 			shift ;for file in "$@"; do
# 			function_check_file "$file"
# 			function_start "$file"
# 
# 		done
# 		  else
# 			echo $"-s requires files" 1>&2
# 			exit 1
# 		  fi ;;
#         -spdf)if (($# > 1)); then
#             shift 
# 			function_check_file "$file"
#             function_create_pdf "$file"
#         
# 		  else
# 			echo $"-spdf requires files" 1>&2
# 			exit 1
# 		  fi ;;
# 		  
#         -sm)if (($# > 1)); then
#         shift 
# 			function_create_multi_image "$1" "$2"
#         
# 		  else
# 			echo $"-spdf requires files" 1>&2
# 			exit 1
# 		  fi 
# 		  
# 		  
# 		  ;;
#         -spdfp)if (($# > 1)); then
# 			function_check_file "$file"
#                         function_create_pdf_and_print "$file"
#         
# 		  else
# 			echo $"-spdf requires files" 1>&2
# 			exit 1
# 		  fi ;;
# 		  
# 	-sp)  
# 		function_print 
# 		
# 	;;
# 	-ds)
# 		if [[ -e "$configfile" ]] ; then
# 			rm "$configfile"
# 			kdialog --passivepopup $"$configfile removed "
# 		else
# 			kdialog --passivepopup $"$configfile do not exist "
# 		fi 
# 	;;
# 	
# 	--) shift; echo "invalid option: $1" 1>&2; function_help; exit 1;;
# 	-*) echo "invalid option: $1" 1>&2; function_help; exit 1;;
# 	esac
# else
# function_help; exit 1
# fi

 
 
